<?xml version="1.0"?>
<rss version="2.0">
<channel>
<title>Karl Arao's TiddlyWiki</title>
<link>http://karlarao.tiddlyspot.com</link>
<description></description>
<language>en</language>
<copyright>Copyright 2021 YourName</copyright>
<pubDate>Mon, 26 Apr 2021 08:29:44 GMT</pubDate>
<lastBuildDate>Mon, 26 Apr 2021 08:29:44 GMT</lastBuildDate>
<docs>http://blogs.law.harvard.edu/tech/rss</docs>
<generator>TiddlyWiki 2.5.0</generator>
<item>
<title>ASH IBM Curam batch instrumentation</title>
<description>&lt;br&gt;I got the job chain info of IBM Curam batch from the dev team&lt;br&gt;&lt;br&gt;Here are the details of how the batch works &lt;br&gt;&lt;blockquote&gt;        IBM CÃºram Social Program Management 7.0.10 - 7.0.11&lt;br&gt;&lt;br&gt;        Batch Streaming Architecture&lt;br&gt;        &lt;a target=&quot;_blank&quot; title=&quot;External link to https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.11/com.ibm.curam.content.doc/BatchPerformanceMechanisms/c_BATCHPER_Architecture1BatchStreamingArchitecture1.html&quot; href=&quot;https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.11/com.ibm.curam.content.doc/BatchPerformanceMechanisms/c_BATCHPER_Architecture1BatchStreamingArchitecture1.html&quot; class=&quot;externalLink&quot;&gt;https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.11/com.ibm.curam.content.doc/BatchPerformanceMechanisms/c_BATCHPER_Architecture1BatchStreamingArchitecture1.html&lt;/a&gt;&lt;br&gt;        The Chunker&lt;br&gt;        &lt;a target=&quot;_blank&quot; title=&quot;External link to https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.11/com.ibm.curam.content.doc/BatchPerformanceMechanisms/c_BATCHPER_Architecture1Chunker1.html&quot; href=&quot;https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.11/com.ibm.curam.content.doc/BatchPerformanceMechanisms/c_BATCHPER_Architecture1Chunker1.html&quot; class=&quot;externalLink&quot;&gt;https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.11/com.ibm.curam.content.doc/BatchPerformanceMechanisms/c_BATCHPER_Architecture1Chunker1.html&lt;/a&gt;&lt;br&gt;        The Stream&lt;br&gt;        &lt;a target=&quot;_blank&quot; title=&quot;External link to https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.11/com.ibm.curam.content.doc/BatchPerformanceMechanisms/c_BATCHPER_Architecture1Stream1.html&quot; href=&quot;https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.11/com.ibm.curam.content.doc/BatchPerformanceMechanisms/c_BATCHPER_Architecture1Stream1.html&quot; class=&quot;externalLink&quot;&gt;https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.11/com.ibm.curam.content.doc/BatchPerformanceMechanisms/c_BATCHPER_Architecture1Stream1.html&lt;/a&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;Here's the SQL to pull data from &lt;a tiddlylink=&quot;SCHEDULER_HISTORY&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SCHEDULER_HISTORY&quot; href=&quot;http://karlarao.tiddlyspot.com#SCHEDULER_HISTORY&quot; class=&quot;externalLink null&quot;&gt;SCHEDULER_HISTORY&lt;/a&gt; table &lt;br&gt;&lt;br&gt;&lt;pre&gt; SELECT *
FROM   (SELECT Substr(H.job_name, Instr(H.job_name, 'jobId-') + 6, 20)
               JOB_ID
                      ,
               Substr(H.job_name, Instr(H.job_name, 'job-') + 4,
               Instr(H.job_name, '-jobId-') - ( Instr(H.job_name, 'job-') + 4 ))
                      JOB_NAME,
               H.start_time,
               H.end_time,
               Regexp_substr(H.job_name, '[A-Za-z0-9\-]+',
               Instr(H.job_name, '/'))
                      FUNCTIONAL_AREA,
               Nvl(Regexp_substr(H.job_name, 'tier-[0-9]+'), 'N/A')
               TIER,
               Substr(H.job_name, 1, Instr(H.job_name, '/') - 1)
                      ORDERED_OR_STANDALONE
        FROM   scheduler_history H
        WHERE  ( ( H.start_time BETWEEN :startTime AND :endTime )
                  OR ( :startTime BETWEEN H.start_time AND H.end_time
                        OR ( :startTime &amp;gt;= H.start_time
                             AND H.end_time IS NULL ) ) )
               AND H.start_time &amp;gt; To_date(:startTime, 'YYYYMMDD HH24:MI:SS') - 2
               AND H.job_name LIKE '%jobId%'
               AND H.job_name NOT LIKE '%parallel%'
               AND H.job_name NOT LIKE '%snyc%'
               AND H.job_name NOT LIKE '%Reporting%'
               AND H.job_name NOT LIKE '%Stream%'
        ORDER  BY 5,
                  3) sub1
ORDER  BY 3 ASC  
&lt;/pre&gt;&lt;br&gt;This is the dependency diagram of the jobs, I defined the levels 1 to 5 to clearly see the sequential dependency on the data set&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116051201-53df5980-a646-11eb-8acc-85946c99a655.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;Here's the calculated field I used. The tableau developer needs to complete this as reflected on the diagram above. What I did is just the jobs executed on 20210317.xlsx data set&lt;br&gt;&lt;br&gt;&lt;pre&gt;IF contains(lower(trim([Functional Area])),'daytimebatch')=true then 'level 0'
ELSEIF contains(lower(trim([Functional Area])),'standalone-only')=true then 'level 0'
ELSEIF contains(lower(trim([Functional Area])),'post-start-of-batchjobs')=true then 'level 1'

ELSEIF contains(lower(trim([Functional Area])),'recipientfile')=true then 'level 2'
ELSEIF contains(lower(trim([Functional Area])),'pre-financials')=true then 'level 2'

ELSEIF contains(lower(trim([Functional Area])),'post-financials-reports')=true then 'level 4'
ELSEIF contains(lower(trim([Functional Area])),'post-financials')=true then 'level 4'
ELSEIF contains(lower(trim([Functional Area])),'post-financials2')=true then 'level 4'
ELSEIF contains(lower(trim([Functional Area])),'pre-bulkprint')=true then 'level 4'

ELSEIF contains(lower(trim([Functional Area])),'bulkprint')=true then 'level 5'
ELSEIF contains(lower(trim([Functional Area])),'ebt-2')=true then 'level 5'
ELSEIF contains(lower(trim([Functional Area])),'ebt-response')=true then 'level 5'

ELSEIF contains(lower(trim([Functional Area])),'financials')=true then 'level 3'
ELSEIF contains(lower(trim([Functional Area])),'ebt')=true then 'level 4'

ELSE 'OTHER' END
&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;Here's the gantt chart. &lt;br&gt;&lt;br&gt;From here we can be tactical and systematic when it comes to tuning. We can identify the blocking jobs and the longest running jobs and how it impacts the overall batch elapsed time. We can isolate these jobs from the Dynatrace instrumentation and even run the identified bad performing batch as standalone and then profile/tune the top &lt;a tiddlylink=&quot;SQLs&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQLs&quot; href=&quot;http://karlarao.tiddlyspot.com#SQLs&quot; class=&quot;externalLink null&quot;&gt;SQLs&lt;/a&gt;. &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116051156-4924c480-a646-11eb-85bf-265efbe56fa4.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;Here's how to create the gantt chart but the tableau developer needs to tap the &lt;a tiddlylink=&quot;SCHEDULER_HISTORY&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SCHEDULER_HISTORY&quot; href=&quot;http://karlarao.tiddlyspot.com#SCHEDULER_HISTORY&quot; class=&quot;externalLink null&quot;&gt;SCHEDULER_HISTORY&lt;/a&gt; table directly instead of a data dump from SQL&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116051200-5346c300-a646-11eb-88b1-6fbab7b01cb0.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</description>
<category>ASH perf instrumentation</category>
<link>http://karlarao.tiddlyspot.com#%5B%5BASH%20IBM%20Curam%20batch%20instrumentation%5D%5D</link>
<pubDate>Mon, 26 Apr 2021 08:29:41 GMT</pubDate>

</item>
<item>
<title>ASH ORMB and OBIEE batch instrumentation</title>
<description>&lt;div class=&quot;dcTOC&quot;&gt;&lt;a class=&quot;toggleButton&quot; title=&quot;show/collapse table of contents&quot; href=&quot;javascript:;&quot;&gt;/* Table of Contents */&lt;/a&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' End to end picture of ORMB and OBIEE performance', event)&quot;&gt; End to end picture of ORMB and OBIEE performance&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' Logic to separate the workload of OBIEE', event)&quot;&gt; Logic to separate the workload of OBIEE&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; End to end picture of ORMB and OBIEE performance&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047450-17a9fa00-a642-11eb-83fc-06b6d9c2c482.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047452-17a9fa00-a642-11eb-939f-1ef82583b6c9.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047454-18429080-a642-11eb-9ccf-d81de4442dd3.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047455-18429080-a642-11eb-8b99-93520ddd7c29.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047456-18db2700-a642-11eb-8ca5-1c09c3ebc379.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047465-1a0c5400-a642-11eb-8906-e790b70a9195.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047466-1a0c5400-a642-11eb-900d-be731beb1eb6.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047473-1b3d8100-a642-11eb-9392-c3ef0e6e7334.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047475-1b3d8100-a642-11eb-9a0e-e8c8d24c126f.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047476-1b3d8100-a642-11eb-98db-f14e777cc084.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047479-1bd61780-a642-11eb-85c2-dd7a43bcad28.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047484-1bd61780-a642-11eb-8e24-c93d0ceea5e3.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047485-1c6eae00-a642-11eb-850d-f6f8b1ddd015.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047487-1c6eae00-a642-11eb-811d-099f8aeca152.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047491-1d9fdb00-a642-11eb-8eaf-5856619d69e8.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047492-1d9fdb00-a642-11eb-8938-1bc8d59b78e5.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047494-1ed10800-a642-11eb-9ec0-af7f85d9ad0a.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; Logic to separate the workload of OBIEE&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;br&gt;&lt;br&gt;Here's what I used on the ASH data to separate the workload of OBIEE.&lt;br&gt;&lt;ul&gt;&lt;li&gt; BIP reports (front end)&lt;/li&gt;&lt;li&gt; ODI ETL jobs&lt;/li&gt;&lt;li&gt; nqsserver (OBIEE processes)&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;pre&gt;Tableau calculated field: 
IF contains(lower(trim([Module])),'BIP')=true THEN 'BIP'
ELSEIF contains(lower(trim([Module])),'ODI')=true THEN 'ODI'
ELSEIF contains(lower(trim([Module])),'nqs')=true THEN 'nqsserver'
ELSE 'OTHER' END
&lt;/pre&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116047456-18db2700-a642-11eb-8ca5-1c09c3ebc379.png&quot;&gt;&lt;br&gt;&lt;br&gt;Some of the reports are instrumented enough that the ACTION column shows the report number. But separating the workload by module is the best&lt;br&gt;</description>
<category>ASH perf instrumentation</category>
<link>http://karlarao.tiddlyspot.com#%5B%5BASH%20ORMB%20and%20OBIEE%20batch%20instrumentation%5D%5D</link>
<pubDate>Mon, 26 Apr 2021 08:01:36 GMT</pubDate>

</item>
<item>
<title>top level SQL_ID (PL/SQL) of batch job - from 2.5hours to 19mins</title>
<description>&lt;div class=&quot;dcTOC&quot;&gt;&lt;a class=&quot;toggleButton&quot; title=&quot;show/collapse table of contents&quot; href=&quot;javascript:;&quot;&gt;/* Table of Contents */&lt;/a&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' summary of the issue:', event)&quot;&gt; summary of the issue:&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' summary of the fix: ', event)&quot;&gt; summary of the fix: &lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' XD10 cluster: 22mins (fast performance) ', event)&quot;&gt; XD10 cluster: 22mins (fast performance) &lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' XD11 cluster: ~2.5hours (bad performance) ', event)&quot;&gt; XD11 cluster: ~2.5hours (bad performance) &lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' the fix ', event)&quot;&gt; the fix &lt;/a&gt;&lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' the complexity and decision behind the fix', event)&quot;&gt; the complexity and decision behind the fix&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' Here's the final SQL', event)&quot;&gt; Here's the final SQL&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; summary of the issue:&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;br&gt;This client have primary (&lt;a tiddlylink=&quot;XD10&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#XD10&quot; href=&quot;http://karlarao.tiddlyspot.com#XD10&quot; class=&quot;externalLink null&quot;&gt;XD10&lt;/a&gt;) and standby (&lt;a tiddlylink=&quot;XD11&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#XD11&quot; href=&quot;http://karlarao.tiddlyspot.com#XD11&quot; class=&quot;externalLink null&quot;&gt;XD11&lt;/a&gt;) exadata environments, golden gate is used to replicate data to the standby site. Every 6 months they alternate switching to the two environments. The problem here was, when they switched to &lt;a tiddlylink=&quot;XD11&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#XD11&quot; href=&quot;http://karlarao.tiddlyspot.com#XD11&quot; class=&quot;externalLink null&quot;&gt;XD11&lt;/a&gt; the batch run of &lt;a tiddlylink=&quot;CA1&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#CA1&quot; href=&quot;http://karlarao.tiddlyspot.com#CA1&quot; class=&quot;externalLink null&quot;&gt;CA1&lt;/a&gt; was running longer from 22mins to ~2.5hours&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; summary of the fix: &lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;Added the &lt;a tiddlylink=&quot;NL_SJ&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#NL_SJ&quot; href=&quot;http://karlarao.tiddlyspot.com#NL_SJ&quot; class=&quot;externalLink null&quot;&gt;NL_SJ&lt;/a&gt; hint inside the correlated subquery to make it operate as a nested loop semi-join. &lt;br&gt;This will force the plan to always use nested loops, and we avoided create a SQL profile/baseline. &lt;br&gt;After the fix was integrated to the code, the new elapsed was 19mins from ~2.5hours. &lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116030850-7fece180-a62a-11eb-89e9-832dd628d37c.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 80%; height: 80%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; &lt;a tiddlylink=&quot;XD10&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#XD10&quot; href=&quot;http://karlarao.tiddlyspot.com#XD10&quot; class=&quot;externalLink null&quot;&gt;XD10&lt;/a&gt; cluster: 22mins (fast performance) &lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;br&gt;This shows consistent elapsed of 22mins. Nov 16, 17, 18 at 9am &lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/115981471-143f4180-a562-11eb-9e98-dc7c72ac57be.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 80%; height: 80%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;Drilling down on the top level &lt;a tiddlylink=&quot;SQL_ID&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_ID&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_ID&quot; class=&quot;externalLink null&quot;&gt;SQL_ID&lt;/a&gt; 1nhgrtxz5fjx5 (the procedure of the batch job) and the driver &lt;a tiddlylink=&quot;SQL_ID&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_ID&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_ID&quot; class=&quot;externalLink null&quot;&gt;SQL_ID&lt;/a&gt; 18qdxm4pkyguk&lt;br&gt;&lt;br&gt;15mins spent by driver &lt;a tiddlylink=&quot;SQL_ID&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_ID&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_ID&quot; class=&quot;externalLink null&quot;&gt;SQL_ID&lt;/a&gt; 18qdxm4pkyguk&lt;br&gt;&lt;br&gt;ONLY 1min spent on INDEX RANGE SCAN by &lt;a tiddlylink=&quot;SQL_ID&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_ID&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_ID&quot; class=&quot;externalLink null&quot;&gt;SQL_ID&lt;/a&gt; 18qdxm4pkyguk&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/115976322-d11da800-a53a-11eb-8234-a6569d9dc5a7.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 80%; height: 80%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;This showing the detailed data of that bar chart associated with INDEX RANGE SCAN, it just confirms that &lt;a tiddlylink=&quot;SQL_ID&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_ID&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_ID&quot; class=&quot;externalLink null&quot;&gt;SQL_ID&lt;/a&gt; 18qdxm4pkyguk did that operation&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/115976433-10002d80-a53c-11eb-87a4-4ca202bfffe6.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 80%; height: 80%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; &lt;a tiddlylink=&quot;XD11&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#XD11&quot; href=&quot;http://karlarao.tiddlyspot.com#XD11&quot; class=&quot;externalLink null&quot;&gt;XD11&lt;/a&gt; cluster: ~2.5hours (bad performance) &lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;br&gt;This shows consistent elapsed of ~2.5hours &lt;br&gt;&lt;br&gt;March 15, 16, 17&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116026097-f9330700-a61f-11eb-84ec-e5bf6a6d8bda.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 80%; height: 80%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;Drilling down on the ~2.5hours, the driver &lt;a tiddlylink=&quot;SQL_ID&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_ID&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_ID&quot; class=&quot;externalLink null&quot;&gt;SQL_ID&lt;/a&gt; 18qdxm4pkyguk is dragging the total elapsed time of the batch. This is because the plan changed from index range scan to fast full scan &lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116027231-4c0dbe00-a622-11eb-8d5e-bf22813c5b5b.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 80%; height: 80%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;On this graph just focus on read_gb row, the sustained red bar is the INDEX FAST FULL SCAN IO by &lt;a tiddlylink=&quot;SQL_ID&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_ID&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_ID&quot; class=&quot;externalLink null&quot;&gt;SQL_ID&lt;/a&gt; 18qdxm4pkyguk. &lt;br&gt;The pl/sql package/procedure performance is getting dragged by 18qdxm4pkyguk because itâs the slowest sql.&lt;br&gt;Thatâs why 22mins (index range scan - selective index blocks PHV 2662027970) vs 2 hours (index fast full scan PHV 1973837680)&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/116028549-62694900-a625-11eb-9cc5-bc71d8c56915.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 80%; height: 80%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; the fix &lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;br&gt;The correlated subquery is where the SQL is having issues those two tables (tracked_offender_profile and tracked_offender_device) are getting accessed as correlated subquery more like row by row and then you have this date filter with function in it which is another issue. &lt;br&gt;&lt;br&gt;&lt;pre&gt;-- this date_utilities_pkg.Convert_to_gmt (tracked_offender_device.rec_end_dt, :B5) &amp;gt; :B4)
FROM tracked_offender_profile OFFENDER,
       AND EXISTS (SELECT 'ACTIVE'
                   FROM   tracked_offender_device
                   WHERE  tracked_offender_device.ct_tracked_offender_id =
                          OFFENDER.ct_tracked_offender_id
                          AND date_utilities_pkg.Convert_to_gmt (
                              tracked_offender_device.rec_end_dt, :B5) &amp;gt;
                              :B4)
&lt;/pre&gt;&lt;br&gt;The bottleneck, plan_line_id 69&lt;br&gt;&lt;pre&gt;

                    |  65 |    HASH JOIN                                |                                |   276 | 51336 |   129   (1)| 00:00:01 |
                    |  66 |     NESTED LOOPS                            |                                |    37 |  5735 |   125   (1)| 00:00:01 |
                    |  67 |      NESTED LOOPS                           |                                |    37 |  5735 |   125   (1)| 00:00:01 |
                    |  68 |       HASH JOIN RIGHT SEMI                  |                                |    37 |  4884 |    88   (2)| 00:00:01 |
                    |  69 |        INDEX STORAGE FAST FULL SCAN         | AK2_TRACKED_OFFENDER_DEVICE    |   521 |  6773 |    11  (10)| 00:00:01 |
                    |  70 |        HASH JOIN                            |                                |   498 | 59262 |    77   (0)| 00:00:01 |

&lt;/pre&gt;&lt;br&gt;Whatâs happening here I think is the date filter is not really working because of the function, then it uses that &lt;a tiddlylink=&quot;AK2&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#AK2&quot; href=&quot;http://karlarao.tiddlyspot.com#AK2&quot; class=&quot;externalLink null&quot;&gt;AK2&lt;/a&gt; index because of the ct_tracked_offender_id, and since &lt;a tiddlylink=&quot;CA1&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#CA1&quot; href=&quot;http://karlarao.tiddlyspot.com#CA1&quot; class=&quot;externalLink null&quot;&gt;CA1&lt;/a&gt; has a lot of rows optimizer chooses fast full scan vs range scan for smaller size schemas. &lt;a tiddlylink=&quot;AK2&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#AK2&quot; href=&quot;http://karlarao.tiddlyspot.com#AK2&quot; class=&quot;externalLink null&quot;&gt;AK2&lt;/a&gt; index contains the ct_tracked_offender_id, rec_end_dt columns&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h2&gt; the complexity and decision behind the fix&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h2&gt;&lt;br&gt;Given that we have 50+ parsing schemas and only &lt;a tiddlylink=&quot;CA1&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#CA1&quot; href=&quot;http://karlarao.tiddlyspot.com#CA1&quot; class=&quot;externalLink null&quot;&gt;CA1&lt;/a&gt; is having this issue, we decided to fix the code of the package being used by &lt;a tiddlylink=&quot;CA1&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#CA1&quot; href=&quot;http://karlarao.tiddlyspot.com#CA1&quot; class=&quot;externalLink null&quot;&gt;CA1&lt;/a&gt;. At first I suggested to create a SQL Profile and then issue ALTER SESSION SET &lt;a tiddlylink=&quot;SQLTUNE_CATEGORY&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQLTUNE_CATEGORY&quot; href=&quot;http://karlarao.tiddlyspot.com#SQLTUNE_CATEGORY&quot; class=&quot;externalLink null&quot;&gt;SQLTUNE_CATEGORY&lt;/a&gt; = â&lt;a tiddlylink=&quot;CA1_PLAN&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#CA1_PLAN&quot; href=&quot;http://karlarao.tiddlyspot.com#CA1_PLAN&quot; class=&quot;externalLink null&quot;&gt;CA1_PLAN&lt;/a&gt;â; when &lt;a tiddlylink=&quot;CA1&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#CA1&quot; href=&quot;http://karlarao.tiddlyspot.com#CA1&quot; class=&quot;externalLink null&quot;&gt;CA1&lt;/a&gt; runs its batch so other parsing schemas will not be affected. But then that's a more complicated solution. We went with the easier route, just put the hint in the subquery to make it operate as a nested loop semi-join. &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h2&gt; Here's the final SQL&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h2&gt;&lt;br&gt;&lt;pre&gt;SELECT /*+ QB_NAME(first_union) */ DISTINCT OFFENDER.ct_tracked_offender_id,
                OFFENDER.offender_first_name,
                OFFENDER.offender_last_name,
                OFFENDER.spvsn_sch_end_dt,
                vt_user_profile.ct_user_id OFFICER_ID,
                app_user.user_first_name   OFFICER_FIRST_NAME,
                app_user.user_last_name    OFFICER_LAST_NAME,
                ori.ori_txt,
                OFFENDER.to_risk_level_id,
                tracked_offender_risk_level.to_risk_level_sort_id,
                tracked_offender_risk_level.to_risk_level_name,
                vt_user_profile.user_login
FROM   vt_user_profile,
       user_notification,
       ori,
       vt_common.t_notification_type,
       tracked_offender_profile OFFENDER,
       vt_user.app_user,
       tracked_offender_risk_level
WHERE  OFFENDER.ct_user_id = vt_user_profile.ct_user_id
       AND ori.ct_ori_id = OFFENDER.ct_ori_id
       AND t_notification_type.by_offender_flag = :B3
       AND vt_user_profile.ct_user_id = user_notification.ct_user_id
       AND user_notification.notification_type_id =
           t_notification_type.notification_type_id
       AND t_notification_type.immediate_alert_flag = :B2
       AND app_user.user_id = vt_user_profile.app_user_id
       AND vt_user_profile.ct_user_id = :B1
       AND OFFENDER.to_risk_level_id =
           tracked_offender_risk_level.to_risk_level_id
       AND EXISTS (SELECT /*+ QB_NAME(first_inner) NL_SJ */ 'ACTIVE'
                   FROM   tracked_offender_device
                   WHERE  tracked_offender_device.ct_tracked_offender_id =
                          OFFENDER.ct_tracked_offender_id
                          AND date_utilities_pkg.Convert_to_gmt (
                              tracked_offender_device.rec_end_dt, :B5) &amp;gt;
                              :B4)
UNION
SELECT /*+ QB_NAME(second_union) */ DISTINCT OFFENDER.ct_tracked_offender_id,
                OFFENDER.offender_first_name,
                OFFENDER.offender_last_name,
                OFFENDER.spvsn_sch_end_dt,
                OFFICER.ct_user_id                          OFFICER_ID,
                app_user.user_first_name                    OFFICER_FIRST_NAME,
                Nvl (app_user.user_last_name, 'UNASSIGNED') OFFICER_LAST_NAME,
                ori.ori_txt,
                OFFENDER.to_risk_level_id,
                tracked_offender_risk_level.to_risk_level_sort_id,
                tracked_offender_risk_level.to_risk_level_name,
                OFFICER.user_login
FROM   vt_user_profile,
       user_notification,
       ori,
       vt_common.t_notification_type,
       tracked_offender_profile OFFENDER,
       user_additional_offender,
       vt_user_profile OFFICER,
       vt_user.app_user,
       tracked_offender_risk_level
WHERE  OFFENDER.ct_tracked_offender_id =
              user_additional_offender.ct_tracked_offender_id
       AND user_additional_offender.ct_user_id = vt_user_profile.ct_user_id
       AND ori.ct_ori_id = OFFENDER.ct_ori_id
       AND t_notification_type.by_offender_flag = :B3
       AND OFFENDER.ct_user_id = OFFICER.ct_user_id(+)
       AND vt_user_profile.ct_user_id = user_notification.ct_user_id
       AND user_notification.notification_type_id =
           t_notification_type.notification_type_id
       AND t_notification_type.immediate_alert_flag = :B2
       AND app_user.user_id = OFFICER.app_user_id
       AND vt_user_profile.ct_user_id = :B1
       AND OFFENDER.to_risk_level_id =
           tracked_offender_risk_level.to_risk_level_id
       AND EXISTS (SELECT /*+ QB_NAME(second_inner) NL_SJ */ 'ACTIVE'
                   FROM   tracked_offender_device
                   WHERE  tracked_offender_device.ct_tracked_offender_id =
                          OFFENDER.ct_tracked_offender_id
                          AND date_utilities_pkg.Convert_to_gmt (
                              tracked_offender_device.rec_end_dt, :B5) &amp;gt;
                              :B4)
UNION
SELECT /*+ QB_NAME(third_union) */ DISTINCT OFFENDER.ct_tracked_offender_id,
                OFFENDER.offender_first_name,
                OFFENDER.offender_last_name,
                OFFENDER.spvsn_sch_end_dt,
                OFFICER.ct_user_id                          OFFICER_ID,
                app_user.user_first_name                    OFFICER_FIRST_NAME,
                Nvl (app_user.user_last_name, 'UNASSIGNED') OFFICER_LAST_NAME,
                ori.ori_txt,
                OFFENDER.to_risk_level_id,
                tracked_offender_risk_level.to_risk_level_sort_id,
                tracked_offender_risk_level.to_risk_level_name,
                OFFICER.user_login
FROM   vt_user_profile,
       user_notification,
       vt_common.t_notification_type,
       tracked_offender_profile OFFENDER,
       ori,
       ori_parent,
       vt_user_profile OFFICER,
       vt_user.app_user,
       tracked_offender_risk_level
WHERE  OFFENDER.ct_ori_id = ori.ct_ori_id
       AND OFFENDER.ct_ori_id = ori_parent.child_id
       AND ori_parent.parent_id = vt_user_profile.ct_ori_id
       AND t_notification_type.by_ori_flag = :B3
       AND OFFENDER.ct_user_id = OFFICER.ct_user_id(+)
       AND vt_user_profile.ct_user_id = user_notification.ct_user_id
       AND user_notification.notification_type_id =
           t_notification_type.notification_type_id
       AND t_notification_type.immediate_alert_flag = :B2
       AND app_user.user_id = OFFICER.app_user_id
       AND vt_user_profile.ct_user_id = :B1
       AND OFFENDER.to_risk_level_id =
           tracked_offender_risk_level.to_risk_level_id
       AND EXISTS (SELECT /*+ QB_NAME(third_inner) NL_SJ */ 'ACTIVE'
                   FROM   tracked_offender_device
                   WHERE  tracked_offender_device.ct_tracked_offender_id =
                          OFFENDER.ct_tracked_offender_id
                          AND date_utilities_pkg.Convert_to_gmt (
                              tracked_offender_device.rec_end_dt, :B5) &amp;gt;
                              :B4)
ORDER  BY ori_txt,
          officer_last_name,
          officer_first_name,
          user_login,
          to_risk_level_sort_id,
          offender_last_name,
          offender_first_name
/
&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</description>
<category>ASH perf instrumentation</category>
<link>http://karlarao.tiddlyspot.com#%5B%5Btop%20level%20SQL_ID%20(PL%2FSQL)%20of%20batch%20job%20-%20from%202.5hours%20to%2019mins%5D%5D</link>
<pubDate>Mon, 26 Apr 2021 07:08:11 GMT</pubDate>

</item>
<item>
<title>12.1 recover database from service</title>
<description>&lt;a target=&quot;_blank&quot; title=&quot;External link to https://balazspapp.wordpress.com/2018/04/05/oracle-18c-recover-standby-database-from-service/&quot; href=&quot;https://balazspapp.wordpress.com/2018/04/05/oracle-18c-recover-standby-database-from-service/&quot; class=&quot;externalLink&quot;&gt;https://balazspapp.wordpress.com/2018/04/05/oracle-18c-recover-standby-database-from-service/&lt;/a&gt;&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to https://www.virtual-dba.com/blog/refreshing-physical-standby-using-recover-from-service-on-12c/&quot; href=&quot;https://www.virtual-dba.com/blog/refreshing-physical-standby-using-recover-from-service-on-12c/&quot; class=&quot;externalLink&quot;&gt;https://www.virtual-dba.com/blog/refreshing-physical-standby-using-recover-from-service-on-12c/&lt;/a&gt;&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to https://dbtut.com/index.php/2019/12/27/recover-datbase-using-service-refresh-standby-database-in-oracle-12c/&quot; href=&quot;https://dbtut.com/index.php/2019/12/27/recover-datbase-using-service-refresh-standby-database-in-oracle-12c/&quot; class=&quot;externalLink&quot;&gt;https://dbtut.com/index.php/2019/12/27/recover-datbase-using-service-refresh-standby-database-in-oracle-12c/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;Restoring and Recovering Files Over the Network (from SERVICE)&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to https://docs.oracle.com/database/121/BRADV/rcmadvre.htm#BRADV685&quot; href=&quot;https://docs.oracle.com/database/121/BRADV/rcmadvre.htm#BRADV685&quot; class=&quot;externalLink&quot;&gt;https://docs.oracle.com/database/121/BRADV/rcmadvre.htm#BRADV685&lt;/a&gt;&lt;br&gt;&lt;br&gt;Creating a Physical Standby database using RMAN restore database from service (Doc ID 2283978.1)&lt;br&gt;</description>
<category>DataGuard Setup Types, DG build method types</category>
<link>http://karlarao.tiddlyspot.com#%5B%5B12.1%20recover%20database%20from%20service%5D%5D</link>
<pubDate>Thu, 15 Apr 2021 23:26:00 GMT</pubDate>

</item>
<item>
<title>DataGuard Setup Types, DG build method types</title>
<description>Build data guard using the following methods&lt;br&gt;&lt;ul&gt;&lt;li&gt; from backupset &lt;/li&gt;&lt;li&gt; Active Duplicate &lt;/li&gt;&lt;li&gt; recover database from service &amp;lt;primary_service&amp;gt; (new in 12.1)&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;</description>
<category>DataGuard</category>
<link>http://karlarao.tiddlyspot.com#%5B%5BDataGuard%20Setup%20Types%2C%20DG%20build%20method%20types%5D%5D</link>
<pubDate>Thu, 15 Apr 2021 23:22:00 GMT</pubDate>

</item>
<item>
<title>ASH latency , ASH io latency</title>
<description>&lt;pre&gt;If you see the time waited for IOs go up, but you're not trying to do more I/O (same amount of data &amp;amp; workload and exec plans haven't changed), you can report the individual I/O latencies to see if your I/O is just slower this time (due to other activity in the storage subsystem).

You can even estimate wait event counts in different latency buckets using ASH data (more granularity and flexibility compared to AWR).

https://github.com/tanelpoder/tpt-oracle/blob/master/ash/devent_hist.sql

SQL&amp;gt; @ash/devent_hist db.file.*read 1=1 &quot;TIMESTAMP'2020-12-10 00:00:00'&quot; &quot;TIMESTAMP'2020-12-10 23:00:00'&quot;

                                   Wait time    Num ASH   Estimated    Estimated    % Event  Estimated
Wait Event                        bucket ms+    Samples Total Waits    Total Sec       Time  Time Graph  
---------------------------- --------------- ---------- ----------- ------------ ---------- ------------ 
db file parallel read                    &amp;lt; 1          7     31592.4        315.9        8.1 |#         | 
                                         &amp;lt; 2          6      4044.5         80.9        2.1 |          | 
                                         &amp;lt; 4          5      1878.6         75.1        1.9 |          | 
                                         &amp;lt; 8          9      1407.2        112.6        2.9 |          | 
                                        &amp;lt; 16         19      1572.1        251.5        6.5 |#         | 
                                        &amp;lt; 32         36      1607.3        514.3       13.2 |#         | 
                                        &amp;lt; 64         35       809.8        518.3       13.3 |#         | 
                                       &amp;lt; 128         52       530.8        679.5       17.5 |##        | 
                                       &amp;lt; 256         44       284.6        728.7       18.7 |##        | 
                                       &amp;lt; 512         28          88        450.7       11.6 |#         | 
                                      &amp;lt; 1024          2         3.7         38.1          1 |          | 
                                      &amp;lt; 4096          1           1         41.0        1.1 |          | 
                                      &amp;lt; 8192          1           1         81.9        2.1 |          | 

db file scattered read                   &amp;lt; 1          4     17209.3        172.1       71.1 |#######   | 
                                         &amp;lt; 2          1       935.5         18.7        7.7 |#         | 
                                         &amp;lt; 4          3        1021         40.8       16.9 |##        | 
                                         &amp;lt; 8          1       131.7         10.5        4.3 |          | 

db file sequential read                  &amp;lt; 1        276   1354178.7     13,541.8        7.7 |#         | 
                                         &amp;lt; 2        221    150962.7      3,019.3        1.7 |          | 
                                         &amp;lt; 4        515    174345.3      6,973.8          4 |          | 
                                         &amp;lt; 8       1453    250309.8     20,024.8       11.4 |#         | 
                                        &amp;lt; 16       1974    181327.4     29,012.4       16.6 |##        | 
                                        &amp;lt; 32       2302    101718.4     32,549.9       18.6 |##        | 
                                        &amp;lt; 64       2122     49502.4     31,681.5       18.1 |##        | 
                                       &amp;lt; 128       1068     12998.8     16,638.4        9.5 |#         | 
                                       &amp;lt; 256        312      1855.9      4,751.1        2.7 |          | 
                                       &amp;lt; 512        260       763.7      3,909.9        2.2 |          | 
                                      &amp;lt; 1024         13        24.7        253.2         .1 |          | 
                                      &amp;lt; 4096         59          59      2,416.6        1.4 |          | 
                                      &amp;lt; 8192        127         127     10,403.8        5.9 |#         | 


This way, any potential latency outliers won't get hidden in averages.


&lt;/pre&gt;</description>
<category>ASH time_waited</category>
<link>http://karlarao.tiddlyspot.com#%5B%5BASH%20latency%20%2C%20ASH%20io%20latency%5D%5D</link>
<pubDate>Tue, 13 Apr 2021 18:34:00 GMT</pubDate>

</item>
<item>
<title>ASH perf instrumentation</title>
<description></description>
<category>Elapsed-AvgMinMax , ash elap - shark fin</category>
<link>http://karlarao.tiddlyspot.com#%5B%5BASH%20perf%20instrumentation%5D%5D</link>
<pubDate>Tue, 13 Apr 2021 05:17:00 GMT</pubDate>

</item>
<item>
<title>ASH granularity, SAMPLE_TIME and SQL_EXEC_START - peoplesoft job troubleshooting</title>
<description>&lt;div class=&quot;dcTOC&quot;&gt;&lt;a class=&quot;toggleButton&quot; title=&quot;show/collapse table of contents&quot; href=&quot;javascript:;&quot;&gt;/* Table of Contents */&lt;/a&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' ASH granularity, SQL_EXEC_START - peoplesoft job troubleshooting', event)&quot;&gt; ASH granularity, SQL_EXEC_START - peoplesoft job troubleshooting&lt;/a&gt;&lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' 1) ASH granularity', event)&quot;&gt; 1) ASH granularity&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' 2) ASH SAMPLE_TIME and SQL_EXEC_START visualized', event)&quot;&gt; 2) ASH SAMPLE_TIME and SQL_EXEC_START visualized&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' the scripts used - ash dump and ash_elap ', event)&quot;&gt; the scripts used - ash dump and ash_elap &lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; ASH granularity, &lt;a tiddlylink=&quot;SQL_EXEC_START&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_EXEC_START&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_EXEC_START&quot; class=&quot;externalLink null&quot;&gt;SQL_EXEC_START&lt;/a&gt; - peoplesoft job troubleshooting&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt; SQL trace would be more granular and definitive on chasing the outlier elap/exec performance (particularly the &amp;lt; 1sec elapsed times) &lt;/li&gt;&lt;li&gt; SQL Monitoring is another way but with limitations (space, threshold, etc.) &lt;a target=&quot;_blank&quot; title=&quot;External link to https://sqlmaria.com/2017/08/01/getting-the-most-out-of-oracle-sql-monitor/&quot; href=&quot;https://sqlmaria.com/2017/08/01/getting-the-most-out-of-oracle-sql-monitor/&quot; class=&quot;externalLink&quot;&gt;https://sqlmaria.com/2017/08/01/getting-the-most-out-of-oracle-sql-monitor/&lt;/a&gt;&lt;/li&gt;&lt;li&gt; ASH is another way but you lose the granularity (especially the &amp;lt; 1sec elapsed times), although the sample_time and sql_exec_start can give you the general wall clock info when a particular SQL started and ended (more on this below)&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;h2&gt; 1) ASH granularity&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h2&gt;Example is this &lt;a tiddlylink=&quot;SQL_ID&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_ID&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_ID&quot; class=&quot;externalLink null&quot;&gt;SQL_ID&lt;/a&gt; 0fhpmaba4znqy which is executed thousands of times with .000x seconds response time per execute (PHV 2970305186)&lt;br&gt;&lt;pre&gt;SYS@FMSSTG:PS122STG1 AS SYSDBA&amp;gt; @sql_id
Enter value for sql_id: 0fhpmaba4znqy
SQL_TEXT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
UPDATE PS_RECV_LOAD_T15 SET RECEIVER_ID = ( SELECT DISTINCT RECEIVER_ID FROM PS_
1 row selected.
BEGINTIM INSTANCE    PLANHASH    EXECDELTA    ROWSDELTA  BUFFERGETSDELTA DISKREADSDELTA        IOWAITDELTA     CPUTIMEDELTA ELAPSEDTIMEDELTA ELAPSEDEXECDELTA    SNAP_ID
-------- -------- ----------- ------------ ------------ ---------------- -------------- ------------------ ---------------- ---------------- ---------------- ----------
02-07 15        1   986626382          110          110      235,624,455              7              3,674    1,367,154,117    1,370,452,852        12.458662       5632   W
.
.
02-08 00        1   986626382          188          188      400,969,410             16              8,354    2,292,949,823    2,298,467,546        12.225891       5641   W
 
02-08 15        1  3862886561       13,946       13,946       42,043,961            949            354,164      322,228,251      332,017,906          .023807       5656
.
.
&amp;gt;&amp;gt;02-11 22        3  2970305186       15,999       15,999        1,055,855            761            371,071        8,703,310        9,964,815          .000286       5691    B   
 
&lt;/pre&gt;&lt;br&gt;&lt;br&gt;The ash_elap.sql output using dba_hist_active_sess_history view shows 1 exec and 0 on avg,min,max elapased&lt;br&gt;&lt;pre&gt;DBA_HIST_ACTIVE_SESSION_HISTORY - ash_elap exec (start to end) avg min max
------------------------------------------------------------------------
SQL_ID          SQL_PLAN_HASH_VALUE        COUNT(*)        AVG        MIN        MAX
--------------- ------------------------ ---------- ---------- ---------- ----------
0fhpmaba4znqy   2970305186                        1          0          0          0
&lt;/pre&gt;&lt;br&gt;Then using v$active_session_history, from 1 exec to 9, then shows .56 avg, 0 min, 1 max elapsed&lt;br&gt;&lt;pre&gt;ACTIVE_SESSION_HISTORY - ash_elap exec avg min max
------------------------------------------------------------------------
0fhpmaba4znqy   2970305186                        9        .56          0          1
&lt;/pre&gt;SQL Tracing this would give way more than 9 exec and lower elapsed time numbers&lt;br&gt; &lt;br&gt;&lt;br&gt;&lt;h2&gt; 2) ASH &lt;a tiddlylink=&quot;SAMPLE_TIME&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SAMPLE_TIME&quot; href=&quot;http://karlarao.tiddlyspot.com#SAMPLE_TIME&quot; class=&quot;externalLink null&quot;&gt;SAMPLE_TIME&lt;/a&gt; and &lt;a tiddlylink=&quot;SQL_EXEC_START&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_EXEC_START&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_EXEC_START&quot; class=&quot;externalLink null&quot;&gt;SQL_EXEC_START&lt;/a&gt; visualized&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h2&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt; sql_exec_start can give you the general wall clock info when a particular SQL started and ended, below is the same Peoplesoft workload. Here we are looking at the job level view of performance.&lt;/li&gt;&lt;li&gt; So the main job that they say executes for 21K times with millisecond level per execute response time actually runs for 2hours overall. The job is called &lt;a tiddlylink=&quot;RSTR_RCVLOAD&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#RSTR_RCVLOAD&quot; href=&quot;http://karlarao.tiddlyspot.com#RSTR_RCVLOAD&quot; class=&quot;externalLink null&quot;&gt;RSTR_RCVLOAD&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/eNi3znY.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 60%; height: 60%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt; Below is the same highlighted 2 hours, only that the time period is across 1 month. David Kurtzâs &lt;a tiddlylink=&quot;PS360&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#PS360&quot; href=&quot;http://karlarao.tiddlyspot.com#PS360&quot; class=&quot;externalLink null&quot;&gt;PS360&lt;/a&gt; (&lt;a target=&quot;_blank&quot; title=&quot;External link to https://github.com/davidkurtz/ps360&quot; href=&quot;https://github.com/davidkurtz/ps360&quot; class=&quot;externalLink&quot;&gt;https://github.com/davidkurtz/ps360&lt;/a&gt;) generated this graph (Process Scheduler Process Map).&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/zNPyygJ.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt; As for the PHV 2970305186 above (ASH granularity). The &lt;a tiddlylink=&quot;SQL_ID&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_ID&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_ID&quot; class=&quot;externalLink null&quot;&gt;SQL_ID&lt;/a&gt; 0fhpmaba4znqy compared to the 2hour end to end job run time is the tiny graph on its own axis (2nd row and it looks like itâs running for a few seconds end to end).&lt;/li&gt;&lt;li&gt; The others highlighted below it are the rest of the &lt;a tiddlylink=&quot;SQL_IDs&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_IDs&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_IDs&quot; class=&quot;externalLink null&quot;&gt;SQL_IDs&lt;/a&gt; of &lt;a tiddlylink=&quot;RSTR_RCVLOAD&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#RSTR_RCVLOAD&quot; href=&quot;http://karlarao.tiddlyspot.com#RSTR_RCVLOAD&quot; class=&quot;externalLink null&quot;&gt;RSTR_RCVLOAD&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;click here for full size image &lt;a target=&quot;_blank&quot; title=&quot;External link to https://i.imgur.com/pJOs8DR.png&quot; href=&quot;https://i.imgur.com/pJOs8DR.png&quot; class=&quot;externalLink&quot;&gt;https://i.imgur.com/pJOs8DR.png&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/pJOs8DR.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;From the same ASH data. The graph below is the breakdown of the 2 hour time series of &lt;a tiddlylink=&quot;RSTR_RCVLOAD&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#RSTR_RCVLOAD&quot; href=&quot;http://karlarao.tiddlyspot.com#RSTR_RCVLOAD&quot; class=&quot;externalLink null&quot;&gt;RSTR_RCVLOAD&lt;/a&gt; above (Process Scheduler Process Map section of &lt;a tiddlylink=&quot;PS360&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#PS360&quot; href=&quot;http://karlarao.tiddlyspot.com#PS360&quot; class=&quot;externalLink null&quot;&gt;PS360&lt;/a&gt;).&lt;br&gt;&lt;ul&gt;&lt;li&gt; The process started 10-&lt;a tiddlylink=&quot;FEB-19&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#FEB-19&quot; href=&quot;http://karlarao.tiddlyspot.com#FEB-19&quot; class=&quot;externalLink null&quot;&gt;FEB-19&lt;/a&gt; 10.06.05.000000 PM and ended 10-&lt;a tiddlylink=&quot;FEB-19&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#FEB-19&quot; href=&quot;http://karlarao.tiddlyspot.com#FEB-19&quot; class=&quot;externalLink null&quot;&gt;FEB-19&lt;/a&gt; 11.54.55.000000 PM based on sample_time and sql_exec_start.&lt;/li&gt;&lt;li&gt; The graph is sliced by SQL TYPE and Plan Hash Value, then colored by &lt;a tiddlylink=&quot;SQL_ID&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_ID&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_ID&quot; class=&quot;externalLink null&quot;&gt;SQL_ID&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt; The red annotated font are the Plan Hash Values with multiple &lt;a tiddlylink=&quot;SQL_IDs&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_IDs&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_IDs&quot; class=&quot;externalLink null&quot;&gt;SQL_IDs&lt;/a&gt;. There are 9 of them thatâs at least 30 minutes. &lt;/li&gt;&lt;li&gt; The black annotated font are the Plan Hash Values with single &lt;a tiddlylink=&quot;SQL_IDs&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_IDs&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_IDs&quot; class=&quot;externalLink null&quot;&gt;SQL_IDs&lt;/a&gt;. There are 5 of them &lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;br&gt;click here for full size image &lt;a target=&quot;_blank&quot; title=&quot;External link to https://i.imgur.com/QU47vcy.png&quot; href=&quot;https://i.imgur.com/QU47vcy.png&quot; class=&quot;externalLink&quot;&gt;https://i.imgur.com/QU47vcy.png&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/QU47vcy.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt; All these &lt;a tiddlylink=&quot;SQLs&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQLs&quot; href=&quot;http://karlarao.tiddlyspot.com#SQLs&quot; class=&quot;externalLink null&quot;&gt;SQLs&lt;/a&gt; are all on CPU event (all green). And the 2 hours is executing in a serial manner. Using 1 CPU on 1 node.&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;click here for full size image &lt;a target=&quot;_blank&quot; title=&quot;External link to https://i.imgur.com/foKJJOb.png&quot; href=&quot;https://i.imgur.com/foKJJOb.png&quot; class=&quot;externalLink&quot;&gt;https://i.imgur.com/foKJJOb.png&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/foKJJOb.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt; Below are the red and black plan hash values mentioned above&lt;/li&gt;&lt;li&gt; The green color is the PHV 2970305186 (0fhpmaba4znqy mentioned in ASH granularity) which is also the tiny blip on the time series graph above &lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/thYqZcA.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 40%; height: 40%; cursor: move;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/zCBgHbq.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 40%; height: 40%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt; In summary, when we looked at it from the job level, we uncovered more tuning opportunities because we can clearly see which &lt;a tiddlylink=&quot;SQLs&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQLs&quot; href=&quot;http://karlarao.tiddlyspot.com#SQLs&quot; class=&quot;externalLink null&quot;&gt;SQLs&lt;/a&gt; and plan_hash_value are eating up the 2 hours end to end elapsed. But this workload is a batch job so having this approach works well.&lt;/li&gt;&lt;li&gt; The wall clock mattered more vs the exact millisecond per execute granularity.&lt;/li&gt;&lt;/ul&gt; &lt;br&gt;&lt;br&gt;&lt;h1&gt; the scripts used - ash dump and ash_elap &lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt; this ash dump script was used to generate the time series breakdown of the 2 hours end to end elapsed &lt;/li&gt;&lt;/ul&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to https://raw.githubusercontent.com/karlarao/pull_dump_and_explore_ash/master/ash/0_gvash_to_csv_12c.sql&quot; href=&quot;https://raw.githubusercontent.com/karlarao/pull_dump_and_explore_ash/master/ash/0_gvash_to_csv_12c.sql&quot; class=&quot;externalLink&quot;&gt;https://raw.githubusercontent.com/karlarao/pull_dump_and_explore_ash/master/ash/0_gvash_to_csv_12c.sql&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt; ash_elap scripts are used to generate the avg,min,max elapsed/exec&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt; ash_elap.sql  - get wall clock time, the filter is &lt;a tiddlylink=&quot;SQL_ID&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_ID&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_ID&quot; class=&quot;externalLink null&quot;&gt;SQL_ID&lt;/a&gt; &lt;ul&gt;&lt;li&gt; &lt;a target=&quot;_blank&quot; title=&quot;External link to https://raw.githubusercontent.com/karlarao/scripts/master/performance/ash_elap.sql&quot; href=&quot;https://raw.githubusercontent.com/karlarao/scripts/master/performance/ash_elap.sql&quot; class=&quot;externalLink&quot;&gt;https://raw.githubusercontent.com/karlarao/scripts/master/performance/ash_elap.sql&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt; ash_elap2.sql  - get wall clock time, the filter is âwhere run_time_sec &amp;lt; &amp;amp;run_time_secâ. So you can just say 0 and it will output all &lt;ul&gt;&lt;li&gt; &lt;a target=&quot;_blank&quot; title=&quot;External link to https://raw.githubusercontent.com/karlarao/scripts/master/performance/ash_elap2.sql&quot; href=&quot;https://raw.githubusercontent.com/karlarao/scripts/master/performance/ash_elap2.sql&quot; class=&quot;externalLink&quot;&gt;https://raw.githubusercontent.com/karlarao/scripts/master/performance/ash_elap2.sql&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt; ash_elap_user.sql  - get wall clock time, the filter is user_id from dba_users. Here you can change the user_id fileter to ACTION, MODULE, or PROGRAM &lt;ul&gt;&lt;li&gt; &lt;a target=&quot;_blank&quot; title=&quot;External link to https://raw.githubusercontent.com/karlarao/scripts/master/performance/ash_elap_user.sql&quot; href=&quot;https://raw.githubusercontent.com/karlarao/scripts/master/performance/ash_elap_user.sql&quot; class=&quot;externalLink&quot;&gt;https://raw.githubusercontent.com/karlarao/scripts/master/performance/ash_elap_user.sql&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;br&gt;If you have multiple &lt;a tiddlylink=&quot;MODULEs&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#MODULEs&quot; href=&quot;http://karlarao.tiddlyspot.com#MODULEs&quot; class=&quot;externalLink null&quot;&gt;MODULEs&lt;/a&gt; or &lt;a tiddlylink=&quot;PROGRAMs&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#PROGRAMs&quot; href=&quot;http://karlarao.tiddlyspot.com#PROGRAMs&quot; class=&quot;externalLink null&quot;&gt;PROGRAMs&lt;/a&gt; and you want to expose that to the group by you can do that just like what I did below&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/dZHZOGz.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;Then if you want to detail on that &lt;a tiddlylink=&quot;SQL_ID&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_ID&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_ID&quot; class=&quot;externalLink null&quot;&gt;SQL_ID&lt;/a&gt;, use  planx Y &amp;lt;sql_id&amp;gt;&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to https://raw.githubusercontent.com/karlarao/scripts/master/performance/planx.sql&quot; href=&quot;https://raw.githubusercontent.com/karlarao/scripts/master/performance/planx.sql&quot; class=&quot;externalLink&quot;&gt;https://raw.githubusercontent.com/karlarao/scripts/master/performance/planx.sql&lt;/a&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;.</description>
<category>peoplesoft troubleshooting</category>
<category>ASH perf instrumentation</category>
<link>http://karlarao.tiddlyspot.com#%5B%5BASH%20granularity%2C%20SAMPLE_TIME%20and%20SQL_EXEC_START%20-%20peoplesoft%20job%20troubleshooting%5D%5D</link>
<pubDate>Tue, 13 Apr 2021 05:16:00 GMT</pubDate>

</item>
<item>
<title>TimestampMath</title>
<description>&lt;a target=&quot;_blank&quot; title=&quot;External link to http://edn.embarcadero.com/article/28886&quot; href=&quot;http://edn.embarcadero.com/article/28886&quot; class=&quot;externalLink&quot;&gt;http://edn.embarcadero.com/article/28886&lt;/a&gt;	&amp;lt;&lt;span&gt;â&lt;/span&gt; weird giving subsecond value&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to http://forums.oracle.com/forums/thread.jspa?threadID=1117064&quot; href=&quot;http://forums.oracle.com/forums/thread.jspa?threadID=1117064&quot; class=&quot;externalLink&quot;&gt;http://forums.oracle.com/forums/thread.jspa?threadID=1117064&lt;/a&gt;   &amp;lt;&lt;span&gt;â&lt;/span&gt; helpful post by user11268895&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to http://kr.forums.oracle.com/forums/thread.jspa?messageID=2517203&quot; href=&quot;http://kr.forums.oracle.com/forums/thread.jspa?messageID=2517203&quot; class=&quot;externalLink&quot;&gt;http://kr.forums.oracle.com/forums/thread.jspa?messageID=2517203&lt;/a&gt;&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to http://bytes.com/topic/oracle/answers/65116-help-need-avg-timestamp1-timestamp2-get-type-error&quot; href=&quot;http://bytes.com/topic/oracle/answers/65116-help-need-avg-timestamp1-timestamp2-get-type-error&quot; class=&quot;externalLink&quot;&gt;http://bytes.com/topic/oracle/answers/65116-help-need-avg-timestamp1-timestamp2-get-type-error&lt;/a&gt;&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to http://mikerault.blogspot.com/2006/07/oracle-timestamp-math.html&quot; href=&quot;http://mikerault.blogspot.com/2006/07/oracle-timestamp-math.html&quot; class=&quot;externalLink&quot;&gt;http://mikerault.blogspot.com/2006/07/oracle-timestamp-math.html&lt;/a&gt;&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to http://www.forumtopics.com/busobj/viewtopic.php?t=132019&amp;amp;start=0&amp;amp;postdays=0&amp;amp;postorder=asc&amp;amp;sid=14bcf84697b244aca41a387791d4b729&quot; href=&quot;http://www.forumtopics.com/busobj/viewtopic.php?t=132019&amp;amp;start=0&amp;amp;postdays=0&amp;amp;postorder=asc&amp;amp;sid=14bcf84697b244aca41a387791d4b729&quot; class=&quot;externalLink&quot;&gt;http://www.forumtopics.com/busobj/viewtopic.php?t=132019&amp;amp;start=0&amp;amp;postdays=0&amp;amp;postorder=asc&amp;amp;sid=14bcf84697b244aca41a387791d4b729&lt;/a&gt;&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to http://www.excelforum.com/excel-worksheet-functions/573306-how-to-convert-date-time-to-seconds.html&quot; href=&quot;http://www.excelforum.com/excel-worksheet-functions/573306-how-to-convert-date-time-to-seconds.html&quot; class=&quot;externalLink&quot;&gt;http://www.excelforum.com/excel-worksheet-functions/573306-how-to-convert-date-time-to-seconds.html&lt;/a&gt;&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to http://en.allexperts.com/q/Excel-1059/2009/4/excel-formula-convert-min-1.htm&quot; href=&quot;http://en.allexperts.com/q/Excel-1059/2009/4/excel-formula-convert-min-1.htm&quot; class=&quot;externalLink&quot;&gt;http://en.allexperts.com/q/Excel-1059/2009/4/excel-formula-convert-min-1.htm&lt;/a&gt;&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to http://www.mrexcel.com/forum/showthread.php?t=2641&quot; href=&quot;http://www.mrexcel.com/forum/showthread.php?t=2641&quot; class=&quot;externalLink&quot;&gt;http://www.mrexcel.com/forum/showthread.php?t=2641&lt;/a&gt;&lt;br&gt;&lt;br&gt;Do Date Arithmetic on Dates&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to http://www.appsdba.com/blog/?p=278&quot; href=&quot;http://www.appsdba.com/blog/?p=278&quot; class=&quot;externalLink&quot;&gt;http://www.appsdba.com/blog/?p=278&lt;/a&gt;</description>
<category>SQL*Plus SYSDATE math</category>
<link>http://karlarao.tiddlyspot.com#TimestampMath</link>
<pubDate>Tue, 13 Apr 2021 04:31:00 GMT</pubDate>

</item>
<item>
<title>EXACT_MATCHING_SIGNATURE vs FORCE_MATCHING_SIGNATURE vs dbms_sqltune.sqltext_to_signature across</title>
<description>&lt;div class=&quot;dcTOC&quot;&gt;&lt;a class=&quot;toggleButton&quot; title=&quot;show/collapse table of contents&quot; href=&quot;javascript:;&quot;&gt;/* Table of Contents */&lt;/a&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' sqltext_to_signature example use', event)&quot;&gt; sqltext_to_signature example use&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' the two example SQLs', event)&quot;&gt; the two example SQLs&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' EXACT_MATCHING_SIGNATURE vs FORCE_MATCHING_SIGNATURE vs dbms_sqltune.sqltext_to_signature across views ', event)&quot;&gt; EXACT_MATCHING_SIGNATURE vs FORCE_MATCHING_SIGNATURE vs dbms_sqltune.sqltext_to_signature across views &lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' how it works - detailed example using SQL Profile and SPM ', event)&quot;&gt; how it works - detailed example using SQL Profile and SPM &lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt; &lt;br&gt;&lt;br&gt;&lt;h1&gt; sqltext_to_signature example use&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;pre&gt;-- sqltext_to_signature example use
exec DBMS_SQLTUNE.SQLTEXT_TO_SIGNATURE('karlarao');   
-- 1 is force matching
select dbms_sqltune.sqltext_to_signature('karlarao',1) from dual;
2777083410832069452
&lt;/pre&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to https://docs.oracle.com/database/121/ARPLS/d_sqltun.htm#ARPLS68464&quot; href=&quot;https://docs.oracle.com/database/121/ARPLS/d_sqltun.htm#ARPLS68464&quot; class=&quot;externalLink&quot;&gt;https://docs.oracle.com/database/121/ARPLS/d_sqltun.htm#ARPLS68464&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; the two example &lt;a tiddlylink=&quot;SQLs&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQLs&quot; href=&quot;http://karlarao.tiddlyspot.com#SQLs&quot; class=&quot;externalLink null&quot;&gt;SQLs&lt;/a&gt;&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;pre&gt;select * from karlarao.skew where skew=3;   --6fvyp18cvnzwa 375614277642158684 -- exact matching 4404474968209701751  -- force matching 1949605896 PHV
select  *   from karlarao.SKEW Where skew=3;   --1myj38m1m3g2u 375614277642158684 -- exact matching 4404474968209701751  -- force matching 1949605896 PHV 

set serveroutput on 
VARIABLE sql1 VARCHAR2(100)
VARIABLE sql2 VARCHAR2(100)
BEGIN
  :sql1 := q'[select * from karlarao.skew where skew=3]';
  :sql2 := q'[select  *   from karlarao.SKEW Where skew=3]';
END;
/
col signature format 999999999999999999999999
SELECT :sql1 sql_text, dbms_sqltune.sqltext_to_signature(:sql1,0) signature FROM dual
UNION ALL
SELECT :sql2 sql_text, dbms_sqltune.sqltext_to_signature(:sql2,0) signature FROM dual
&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; &lt;a tiddlylink=&quot;EXACT_MATCHING_SIGNATURE&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#EXACT_MATCHING_SIGNATURE&quot; href=&quot;http://karlarao.tiddlyspot.com#EXACT_MATCHING_SIGNATURE&quot; class=&quot;externalLink null&quot;&gt;EXACT_MATCHING_SIGNATURE&lt;/a&gt; vs &lt;a tiddlylink=&quot;FORCE_MATCHING_SIGNATURE&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#FORCE_MATCHING_SIGNATURE&quot; href=&quot;http://karlarao.tiddlyspot.com#FORCE_MATCHING_SIGNATURE&quot; class=&quot;externalLink null&quot;&gt;FORCE_MATCHING_SIGNATURE&lt;/a&gt; vs dbms_sqltune.sqltext_to_signature across views &lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;pre&gt;select * from v$sql where sql_id in ('6fvyp18cvnzwa','1myj38m1m3g2u');
select * from gv$sqlstats where sql_id in ('6fvyp18cvnzwa','1myj38m1m3g2u'); -- same as v$sql but planx uses this
--EXACT_MATCHING_SIGNATURE (dbms_sqltune.sqltext_to_signature) - Signature calculated on the normalized SQL text. The normalization includes the removal of white space and the uppercasing of all non-literal strings.
--FORCE_MATCHING_SIGNATURE - Signature used when the CURSOR_SHARING parameter is set to FORCE

select * from dba_sql_plan_baselines;   -- only signature 375614277642158684 which is the EXACT_MATCHING_SIGNATURE
-- SQL_05367332076d025c SQL_HANDLE , SQL_PLAN_0admm683qu0kw08e93fe4 PLAN_NAME

select * from dba_sql_profiles;  -- here signature means 4404474968209701751 FORCE_MATCHING_SIGNATURE, with FORCE_MATCHING=yes/no
select name, force_matching, signature, created from dba_sql_profiles where signature in (select force_matching_signature from dba_hist_sqlstat where sql_id = '6fvyp18cvnzwa');

select * from dba_hist_sqlstat where sql_id in ('6fvyp18cvnzwa'); --4404474968209701751 only contains FORCE_MATCHING_SIGNATURE



-- generate explain plans of SQL handle 
SELECT sql_handle FROM dba_sql_plan_baselines WHERE signature = 375614277642158684 AND ROWNUM = 1; --SQL_05367332076d025c
SELECT PLAN_TABLE_OUTPUT FROM TABLE(DBMS_XPLAN.DISPLAY_SQL_PLAN_BASELINE('SQL_05367332076d025c'));

&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; how it works - detailed example using SQL Profile and SPM &lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;pre&gt;
--6fvyp18cvnzwa
-- start with full table scan plan
ALTER SESSION SET OPTIMIZER_USE_SQL_PLAN_BASELINES=false;
select * from karlarao.skew where skew=3;

DECLARE
my_plans pls_integer;
BEGIN
my_plans := DBMS_SPM.LOAD_PLANS_FROM_CURSOR_CACHE(sql_id =&amp;gt; '6fvyp18cvnzwa',plan_hash_value=&amp;gt;'246648590', fixed =&amp;gt;'YES', enabled=&amp;gt;'YES');
END;
/

create index karlarao.skew_idx on skew(skew); 
exec dbms_stats.gather_index_stats(user,'SKEW_IDX', no_invalidate =&amp;gt; false); 
exec dbms_stats.gather_table_stats(user,'SKEW', no_invalidate =&amp;gt; false); 

--1myj38m1m3g2u
-- to parse and pickup the new index and create a new PHV
ALTER SESSION SET OPTIMIZER_USE_SQL_PLAN_BASELINES=false;  
select  *   from karlarao.SKEW Where skew=3


-- even with different SQL_ID, what matters is the text matches the EXACT_MATCHING_SIGNATURE 375614277642158684 to be tied to SQL_HANDLE SQL_05367332076d025c as a new SQL PLAN_NAME
DECLARE
my_plans pls_integer;
BEGIN
my_plans := DBMS_SPM.LOAD_PLANS_FROM_CURSOR_CACHE(sql_id =&amp;gt; '1myj38m1m3g2u',plan_hash_value=&amp;gt;'1949605896', fixed =&amp;gt;'YES', enabled=&amp;gt;'YES');
END;
/

SQL handle: SQL_05367332076d025c
SQL text: select * from karlarao.skew where skew=3
Plan name: SQL_PLAN_0admm683qu0kw08e93fe4 
Plan hash value: 1949605896
Plan name: SQL_PLAN_0admm683qu0kw950a48a8         
Plan hash value: 246648590


02:19:18 KARLARAO@cdb1&amp;gt; SELECT PLAN_TABLE_OUTPUT FROM TABLE(DBMS_XPLAN.DISPLAY_SQL_PLAN_BASELINE('SQL_05367332076d025c'));

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------
SQL handle: SQL_05367332076d025c
SQL text: select * from karlarao.skew where skew=3
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Plan name: SQL_PLAN_0admm683qu0kw08e93fe4         Plan id: 149503972
Enabled: YES     Fixed: YES     Accepted: YES     Origin: MANUAL-LOAD
Plan rows: From dictionary
--------------------------------------------------------------------------------

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Plan hash value: 1949605896

------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name     | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |          |       |       |     2 (100)|          |
|   1 |  TABLE ACCESS BY INDEX ROWID BATCHED| SKEW     |     1 |     7 |     2   (0)| 00:00:01 |
|*  2 |   INDEX RANGE SCAN                  | SKEW_IDX |     1 |       |     1   (0)| 00:00:01 |
------------------------------------------------------------------------------------------------


PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access(&quot;SKEW&quot;=3)

--------------------------------------------------------------------------------
Plan name: SQL_PLAN_0admm683qu0kw950a48a8         Plan id: 2500479144
Enabled: YES     Fixed: YES     Accepted: YES     Origin: MANUAL-LOAD
Plan rows: From dictionary
--------------------------------------------------------------------------------


PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Plan hash value: 246648590

--------------------------------------------------------------------------
| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |      |       |       |     8 (100)|          |
|*  1 |  TABLE ACCESS FULL| SKEW |     1 |     7 |     8  (13)| 00:00:01 |
--------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

   1 - filter(&quot;SKEW&quot;=3)

46 rows selected.




-- another way to add a new plan to an existing baseline is to create a test SQL, add hints to get the desired plan
-- once created, the explain plan will show both profile and baseline are used although the old plan is still in effect
-- the SQL profile plan will only be in effect when the PHV is added to the SPM 

select /* new */ * from karlarao.SKEW Where skew=3;


02:47:23 KARLARAO@cdb1&amp;gt; @copy_plan_hash_value.sql
Enter value for plan_hash_value to generate profile from (X0X0X0X0): 1949605896
Enter value for sql_id to attach profile to (X0X0X0X0): 6fvyp18cvnzwa
Enter value for child_no to attach profile to (0): 
Enter value for category (DEFAULT): 
Enter value for force_matching (false): true
old  18:             plan_hash_value = '&amp;amp;&amp;amp;plan_hash_value_from'
new  18:             plan_hash_value = '1949605896'
old  32:    sql_id = '&amp;amp;&amp;amp;sql_id_to'
new  32:    sql_id = '6fvyp18cvnzwa'
old  33:    and child_number = &amp;amp;&amp;amp;child_no_to;
new  33:    and child_number = 0;
old  37:    dbms_output.put_line ('SQL_ID ' || '&amp;amp;&amp;amp;sql_id_to' || ' not found in v$sql');
new  37:    dbms_output.put_line ('SQL_ID ' || '6fvyp18cvnzwa' || ' not found in v$sql');
old  49:       sql_id = '&amp;amp;&amp;amp;sql_id_to';
new  49:       sql_id = '6fvyp18cvnzwa';
old  53:       dbms_output.put_line ('SQL_ID ' || '&amp;amp;&amp;amp;sql_id_to' || ' not found in dba_hist_sqltext');
new  53:       dbms_output.put_line ('SQL_ID ' || '6fvyp18cvnzwa' || ' not found in dba_hist_sqltext');
old  60: name =&amp;gt; 'SP_'||'&amp;amp;&amp;amp;sql_id_to'||'_'||'&amp;amp;&amp;amp;plan_hash_value_from',
new  60: name =&amp;gt; 'SP_'||'6fvyp18cvnzwa'||'_'||'1949605896',
old  61: category =&amp;gt; '&amp;amp;&amp;amp;category',
new  61: category =&amp;gt; 'DEFAULT',
old  63: force_match =&amp;gt; &amp;amp;&amp;amp;force_matching
new  63: force_match =&amp;gt; true

PL/SQL procedure successfully completed.


DECLARE
my_plans pls_integer;
BEGIN
my_plans := DBMS_SPM.LOAD_PLANS_FROM_CURSOR_CACHE(sql_id =&amp;gt; '6fvyp18cvnzwa',plan_hash_value=&amp;gt;'1949605896', fixed =&amp;gt;'YES', enabled=&amp;gt;'YES');
END;
/
375614277642158684	SQL_05367332076d025c	select * from karlarao.skew where skew=3	SQL_PLAN_0admm683qu0kw08e93fe4	HR	MANUAL-LOAD	KARLARAO
375614277642158684	SQL_05367332076d025c	select * from karlarao.skew where skew=3	SQL_PLAN_0admm683qu0kw950a48a8	SYS	MANUAL-LOAD	SYS


&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</description>
<category>force_matching</category>
<category>..step by step SQL Profile and Baseline</category>
<link>http://karlarao.tiddlyspot.com#%5B%5BEXACT_MATCHING_SIGNATURE%20vs%20FORCE_MATCHING_SIGNATURE%20vs%20dbms_sqltune.sqltext_to_signature%20across%5D%5D</link>
<pubDate>Tue, 13 Apr 2021 04:27:00 GMT</pubDate>

</item>
<item>
<title>Elapsed-AvgMinMax , ash elap - shark fin</title>
<description>&lt;div class=&quot;dcTOC&quot;&gt;&lt;a class=&quot;toggleButton&quot; title=&quot;show/collapse table of contents&quot; href=&quot;javascript:;&quot;&gt;/* Table of Contents */&lt;/a&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' ash elap - shark fin ', event)&quot;&gt; ash elap - shark fin &lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' ash elap scripts (script version of shark fin using SQL_EXEC_START and SAMPLE_TIME)', event)&quot;&gt; ash elap scripts (script version of shark fin using SQL_EXEC_START and SAMPLE_TIME)&lt;/a&gt;&lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' ash_elap_topsql.sql (top n by elapsed)', event)&quot;&gt; ash_elap_topsql.sql (top n by elapsed)&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' ash_elap_hist.sql (by elap &gt; seconds filter)', event)&quot;&gt; ash_elap_hist.sql (by elap &amp;gt; seconds filter)&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' ash_elap_hist_user.sql (by parsing_schema)', event)&quot;&gt; ash_elap_hist_user.sql (by parsing_schema)&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' ash_elap as part of planx.sql (sqldb360)', event)&quot;&gt; ash_elap as part of planx.sql (sqldb360)&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' ash elap explained ', event)&quot;&gt; ash elap explained &lt;/a&gt;&lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' elapsed time (wall clock) using ASH', event)&quot;&gt; elapsed time (wall clock) using ASH&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' Making use of STDDEV on elapsed time', event)&quot;&gt; Making use of STDDEV on elapsed time&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; ash elap - shark fin &lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;ul&gt;&lt;li&gt; the idea behind shark fin viz is simple. The biggest shark = worst SQL &lt;/li&gt;&lt;/ul&gt;&lt;br&gt;tableau calculated field &lt;br&gt;&lt;pre&gt;DATEDIFF('second',MIN([TMS]),max([TM]))


Above calculates the diff of these two columns to form a shark fin, bigger fins mean longer running query. Then you can use the ASH dimensions to slice and dice the data
min(SQL_EXEC_START), max(SAMPLE_TIME)
&lt;/pre&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/XqWgFxM.jpg&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/OzlGpU4.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; ash elap scripts (script version of shark fin using &lt;a tiddlylink=&quot;SQL_EXEC_START&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_EXEC_START&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_EXEC_START&quot; class=&quot;externalLink null&quot;&gt;SQL_EXEC_START&lt;/a&gt; and &lt;a tiddlylink=&quot;SAMPLE_TIME&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SAMPLE_TIME&quot; href=&quot;http://karlarao.tiddlyspot.com#SAMPLE_TIME&quot; class=&quot;externalLink null&quot;&gt;SAMPLE_TIME&lt;/a&gt;)&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;br&gt;&lt;br&gt;&lt;h2&gt; ash_elap_topsql.sql (top n by elapsed)&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h2&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to https://github.com/karlarao/scripts/blob/master/performance/ash_elap_topsql.sql&quot; href=&quot;https://github.com/karlarao/scripts/blob/master/performance/ash_elap_topsql.sql&quot; class=&quot;externalLink&quot;&gt;https://github.com/karlarao/scripts/blob/master/performance/ash_elap_topsql.sql&lt;/a&gt;&lt;br&gt;&lt;pre&gt;
00:00:33 SYS@cdb1&amp;gt; @ash_elap_topsql

SQL_ID        SQL_TYPE                     MODULE                                             PARSING_SCHEMA       DISTINCT_PHV EXEC_COUNT   ELAP_AVG   ELAP_MIN   ELAP_MAX    PCT_CPU   PCT_WAIT     PCT_IO MAX_TEMP_MB MAX_PGA_MB MAX_READ_MB MAX_WRITE_MB  MAX_RIOPS  MAX_WIOPS
------------- ---------------------------- -------------------------------------------------- -------------------- ------------ ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------- ---------- ----------- ------------ ---------- ----------
2j1z0b4ptkqtb PL/SQL EXECUTE               sqlplus@karldevfedora (TNS V1-V3)                  SYS                             1          1       7.07       7.07       7.07        100          0          0           1       8.16         7.2                    682
b9p45hkcx0pwh SELECT                                                                          SYS                             1          1       5.54       5.54       5.54          0          0        100                   13.3        13.4          .08       675  83
cnphq355f5rah PL/SQL EXECUTE               DBMS_SCHEDULER                                     SYS                             1          1       4.35       4.35       4.35        100          0          0           1      14.23        4.93         2.26       281   5
4u5zq7r9y690a SELECT                       DBMS_SCHEDULER                                     SYS                             2          2       2.89       2.78          3        100          0          0                  44.17       40.93          .13      5157   7
acc988uzvjmmt DELETE                       MMON_SLAVE                                         SYS                             2          2       2.32       1.92       2.73         50          0         50                   1.42       35.33                   1255
6ajkhukk78nsr PL/SQL EXECUTE               MMON_SLAVE                                         SYS                            14         14       1.56         .5       2.63        100          0          0           2      26.73        1.38                    100
4d4gpy6vwqcyw SELECT                       SQL Developer                                      HR                              2          2       1.58        .66       2.49        100          0          0           2      12.09        2.24                    172
3wrrjm9qtr2my SELECT                       MMON_SLAVE                                         SYS                             4          4       1.79       1.14       2.26        100          0          0                  30.23       33.95                    320
0w26sk6t6gq98 SELECT                       MMON_SLAVE                                         SYS                             1          1       2.12       2.12       2.12        100          0          0           1       4.36           2                    249
6ajkhukk78nsr PL/SQL EXECUTE               SQL Developer                                      HR                              1          1       2.12       2.12       2.12        100          0          0           2      11.53        30.8          .27      1577  18
d2tvgg49y2ap6 SELECT                       MMON_SLAVE                                         SYS                             1          1       1.98       1.98       1.98        100          0          0           1      22.79        2.08                    217

SQL_ID        SQL_TYPE                     MODULE                                             PARSING_SCHEMA       DISTINCT_PHV EXEC_COUNT   ELAP_AVG   ELAP_MIN   ELAP_MAX    PCT_CPU   PCT_WAIT     PCT_IO MAX_TEMP_MB MAX_PGA_MB MAX_READ_MB MAX_WRITE_MB  MAX_RIOPS  MAX_WIOPS
------------- ---------------------------- -------------------------------------------------- -------------------- ------------ ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------- ---------- ----------- ------------ ---------- ----------
fuws5bqghb2qh SELECT                       MMON_SLAVE                                         SYS                             8          8       1.17        .27       1.96        100          0          0                   7.29         .11                      7
2n1wa7zpt48cg SELECT                       MMON_SLAVE                                         SYS                             1          1       1.91       1.91       1.91        100          0          0           1      52.23       16.51                    777
2afh4r7z1rfv6 INSERT                       MMON_SLAVE                                         SYS                             1          1       1.85       1.85       1.85        100          0          0                  11.17         .43                     35
1k5c5twx2xr01 INSERT                       DBMS_SCHEDULER                                     SYS                             1          1       1.85       1.85       1.85          0        100          0                   1.17
3xjw1ncw5vh27 SELECT                       DBMS_SCHEDULER                                     SYS                             4          4       1.28        .41       1.84        100          0          0                  12.73        1.46                    139
a6ygk0r9s5xuj SELECT                       MMON_SLAVE                                         SYS                             8          8       1.03         .3       1.83         75         13         13                   8.98         .27                     20
bkfnnm1unwz2b SELECT                       SQL Developer                                      HR                              1          1       1.83       1.83       1.83        100          0          0          25      26.23      189.17          .31      4607   8
15wvjr16nbyf9 SELECT                       MMON_SLAVE                                         SYS                             1          1       1.76       1.76       1.76        100          0          0           1      25.23        4.63                    363
3vg8wn9rtb8r6 SELECT                       DBMS_SCHEDULER                                     SYS                             1          1       1.73       1.73       1.73        100          0          0           2      27.73       34.94          .14      2437   6
c9umxngkc3byq SELECT                       MMON_SLAVE                                         SYS                             3          3       1.26        .89       1.73        100          0          0                    .86
gbb40ccatx69g SELECT                       sqlplus@karldevfedora (TNS V1-V3)                  SYS                             1          1       1.72       1.72       1.72        100          0          0                  31.11        1.13                     89

&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h2&gt; ash_elap_hist.sql (by elap &amp;gt; seconds filter)&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h2&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to https://github.com/karlarao/scripts/blob/master/performance/ash_elap_hist.sql&quot; href=&quot;https://github.com/karlarao/scripts/blob/master/performance/ash_elap_hist.sql&quot; class=&quot;externalLink&quot;&gt;https://github.com/karlarao/scripts/blob/master/performance/ash_elap_hist.sql&lt;/a&gt;&lt;br&gt;&lt;pre&gt;
23:57:26 SYS@cdb1&amp;gt; @ash_elap_hist

DBA_HIST_ACTIVE_SESS_HISTORY - ash_elap by exec (recent)
~~~~~~~~~~~~~~~~~~~~~~~~~
Enter value for run_time_sec: 5
old  26: where run_time_sec &amp;gt; &amp;amp;run_time_sec
new  26: where run_time_sec &amp;gt; 5

SQL_ID        SQL_EXEC_ID SQL_PLAN_HASH_VALUE SQL_EXEC_START                 RUN_TIME_TIMESTAMP             RUN_TIME_SEC
------------- ----------- ------------------- ------------------------------ ------------------------------ ------------
2j1z0b4ptkqtb    16777216                   0 12-APR-21 12.19.03.000000 AM   +000000000 00:00:07.071               7.071
b9p45hkcx0pwh    16777216                   0 12-APR-21 10.58.07.000000 PM   +000000000 00:00:05.541               5.541


DBA_HIST_ACTIVE_SESS_HISTORY - ash_elap exec avg min max
~~~~~~~~~~~~~~~~~~~~~~~~~
Enter value for sql_id: 2j1z0b4ptkqtb

SQL_PLAN_HASH_VALUE   COUNT(*)        AVG        MIN        MAX
------------------- ---------- ---------- ---------- ----------
                  0          1       7.07       7.07       7.07
                             1       7.07       7.07       7.07

&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h2&gt; ash_elap_hist_user.sql (by parsing_schema)&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h2&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to https://github.com/karlarao/scripts/blob/master/performance/ash_elap_hist_user.sql&quot; href=&quot;https://github.com/karlarao/scripts/blob/master/performance/ash_elap_hist_user.sql&quot; class=&quot;externalLink&quot;&gt;https://github.com/karlarao/scripts/blob/master/performance/ash_elap_hist_user.sql&lt;/a&gt;&lt;br&gt;&lt;pre&gt;
23:58:26 SYS@cdb1&amp;gt; @ash_elap_hist_user

DBA_HIST_ACTIVE_SESS_HISTORY - ash_elap by exec (recent)
~~~~~~~~~~~~~~~~~~~~~~~~~
Enter value for user: HR
old  21: and user_id in (select user_id from dba_users where upper(username) like upper('&amp;amp;&amp;amp;user'))
new  21: and user_id in (select user_id from dba_users where upper(username) like upper('HR'))

SQL_ID        SQL_EXEC_ID SQL_PLAN_HASH_VALUE SQL_EXEC_START                 RUN_TIME_TIMESTAMP             RUN_TIME_SEC
------------- ----------- ------------------- ------------------------------ ------------------------------ ------------
510myug0qnp5j    16777216                   0 06-APR-21 09.25.23.000000 PM   +000000000 00:00:00.331                .331
bkfnnm1unwz2b    16777216          2479479715 07-APR-21 01.19.13.000000 AM   +000000000 00:00:01.826               1.826
6ajkhukk78nsr    16777218                   0 11-APR-21 11.53.05.000000 PM   +000000000 00:00:02.124               2.124
5h7w8ykwtb2xt    16777433          4166561850 11-APR-21 11.53.36.000000 PM   +000000000 00:00:01.166               1.166
4d4gpy6vwqcyw    16777220          1820166347 12-APR-21 02.03.27.000000 AM   +000000000 00:00:02.494               2.494
4d4gpy6vwqcyw    16777223          1820166347 12-APR-21 02.51.13.000000 AM   +000000000 00:00:00.663                .663

6 rows selected.


DBA_HIST_ACTIVE_SESS_HISTORY - ash_elap exec avg min max
~~~~~~~~~~~~~~~~~~~~~~~~~

SQL_PLAN_HASH_VALUE   COUNT(*)        AVG        MIN        MAX
------------------- ---------- ---------- ---------- ----------
         2479479715          1       1.83       1.83       1.83
         1820166347          2       1.58        .66       2.49
         4166561850          1       1.17       1.17       1.17
                  0          2       1.23        .33       2.12
                             6       1.43        .33       2.49

&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; ash_elap as part of planx.sql (sqldb360)&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to https://github.com/karlarao/scripts/blob/master/performance/planx.sql&quot; href=&quot;https://github.com/karlarao/scripts/blob/master/performance/planx.sql&quot; class=&quot;externalLink&quot;&gt;https://github.com/karlarao/scripts/blob/master/performance/planx.sql&lt;/a&gt;&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to https://github.com/karlarao/sqldb360/blob/master/sql/planx.sql&quot; href=&quot;https://github.com/karlarao/sqldb360/blob/master/sql/planx.sql&quot; class=&quot;externalLink&quot;&gt;https://github.com/karlarao/sqldb360/blob/master/sql/planx.sql&lt;/a&gt;  (same as above)&lt;br&gt;&lt;ul&gt;&lt;li&gt; I customized the planx.sql to include the ash_elap scripts to have a better view of recent elapsed time and performance of the &lt;a tiddlylink=&quot;SQL_ID&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_ID&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_ID&quot; class=&quot;externalLink null&quot;&gt;SQL_ID&lt;/a&gt;&lt;ul&gt;&lt;li&gt; temp,pga,read,write,riops,wiops by &lt;a tiddlylink=&quot;SQL_EXEC_ID&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQL_EXEC_ID&quot; href=&quot;http://karlarao.tiddlyspot.com#SQL_EXEC_ID&quot; class=&quot;externalLink null&quot;&gt;SQL_EXEC_ID&lt;/a&gt;&lt;/li&gt;&lt;li&gt; PHV avg,min,max &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;pre&gt;@planx Y brfw9gfks2d37
&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;pre&gt;
SQL_ID: brfw9gfks2d37
SIGNATURE: 9196040709030148699
SIGNATUREF: 9196040709030148699
DB NAME: CDB1
INSTANCE NAME: cdb1
PDB NAME: cdb1

select min(hire_date), max(hire_date) from hr.employees


GV$SQL_PLAN_STATISTICS_ALL LAST (ordered by inst_id and child_number)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Inst: 1   Child: 0    Plan hash value: 1756381138

                      ---------------------------------------------------------------------------------
                      | Id  | Operation          | Name      | E-Rows |E-Bytes| Cost (%CPU)| E-Time   |
                      ---------------------------------------------------------------------------------
                      |   0 | SELECT STATEMENT   |           |        |       |     3 (100)|          |
                      |   1 |  SORT AGGREGATE    |           |      1 |     8 |            |          |
                      |   2 |   TABLE ACCESS FULL| EMPLOYEES |    107 |   856 |     3   (0)| 00:00:01 |
                      ---------------------------------------------------------------------------------

                      Query Block Name / Object Alias (identified by operation id):
                      -------------------------------------------------------------

                         1 - SEL$1
                         2 - SEL$1 / EMPLOYEES@SEL$1

                      Outline Data
                      -------------

                        /*+
                            BEGIN_OUTLINE_DATA
                            IGNORE_OPTIM_EMBEDDED_HINTS
                            OPTIMIZER_FEATURES_ENABLE('12.1.0.2')
                            DB_VERSION('12.1.0.2')
                            OPT_PARAM('_optimizer_use_feedback' 'false')
                            ALL_ROWS
                            OUTLINE_LEAF(@&quot;SEL$1&quot;)
                            FULL(@&quot;SEL$1&quot; &quot;EMPLOYEES&quot;@&quot;SEL$1&quot;)
                            END_OUTLINE_DATA
                        */

                      Column Projection Information (identified by operation id):
                      -----------------------------------------------------------

                         1 - (#keys=0) MAX(&quot;HIRE_DATE&quot;)[7], MIN(&quot;HIRE_DATE&quot;)[7]
                         2 - (rowset=200) &quot;HIRE_DATE&quot;[DATE,7]

                      Note
                      -----
                         - Warning: basic plan statistics not available. These are only collected when:
                             * hint 'gather_plan_statistics' is used for the statement or
                             * parameter 'statistics_level' is set to 'ALL', at session or system level


GV$ACTIVE_SESSION_HISTORY - ash_elap by exec (recent)
~~~~~~~~~~~~~~~~~~~~~~~~~

SOURCE   SQL_ID        SQL_EXEC_ID SQL_PLAN_HASH_VALUE SQL_EXEC_START                 RUN_TIME_TIMESTAMP             RUN_TIME_SEC    TEMP_MB     PGA_MB    READ_MB   WRITE_MB      RIOPS      WIOPS
-------- ------------- ----------- ------------------- ------------------------------ ------------------------------ ------------ ---------- ---------- ---------- ---------- ---------- ----------
realtime brfw9gfks2d37    16777225          1756381138 12-APR-21 09.54.58.000000 PM   +000000000 00:00:00.483                .483          0       1.49         .2          0         19          0
realtime brfw9gfks2d37    16777285          1756381138 12-APR-21 09.55.08.000000 PM   +000000000 00:00:00.493                .493          0       1.49         .2          0         19          0

GV$ACTIVE_SESSION_HISTORY - ash_elap exec avg min max
~~~~~~~~~~~~~~~~~~~~~~~~~

SOURCE   SQL_PLAN_HASH_VALUE   COUNT(*)        AVG        MIN        MAX
-------- ------------------- ---------- ---------- ---------- ----------
realtime          1756381138          2        .49        .48        .49
                                      2        .49        .48        .49

SOURCE     SQL_PLAN_HASH_VALUE   COUNT(*)        AVG        MIN        MAX
---------- ------------------- ---------- ---------- ---------- ----------
                                        0

GV$ACTIVE_SESSION_HISTORY
~~~~~~~~~~~~~~~~~~~~~~~~~

SOURCE            SAMPLES  PERCENT TIMED_EVENT
-------- ---------------- -------- ----------------------------------------------------------------------
realtime               30    100.0 ON CPU

GV$ACTIVE_SESSION_HISTORY - by inst_id
~~~~~~~~~~~~~~~~~~~~~~~~~

SOURCE            SAMPLES  PERCENT    INST_ID TIMED_EVENT
-------- ---------------- -------- ---------- ----------------------------------------------------------------------
realtime               30    100.0          1 ON CPU

GV$ACTIVE_SESSION_HISTORY
~~~~~~~~~~~~~~~~~~~~~~~~~

         SAMPLES  PERCENT PLAN_HASH_VALUE  LINE_ID OPERATION                                          TIMED_EVENT
---------------- -------- --------------- -------- -------------------------------------------------- ----------------------------------------------------------------------
              13     43.3      1756381138        0                                                    ON CPU
              12     40.0      1475428744        0                                                    ON CPU
               2      6.7               0        0                                                    ON CPU
               1      3.3      1756381138        0 SELECT STATEMENT                                   ON CPU
               1      3.3      1756381138        1 SORT AGGREGATE                                     ON CPU
               1      3.3      1756381138        2 TABLE ACCESS FULL                                  ON CPU


GV$ACTIVE_SESSION_HISTORY
~~~~~~~~~~~~~~~~~~~~~~~~~

         SAMPLES  PERCENT PLAN_HASH_VALUE  LINE_ID OPERATION                                          CURRENT_OBJECT                                               TIMED_EVENT
---------------- -------- --------------- -------- -------------------------------------------------- ------------------------------------------------------------ ----------------------------------------------------------------------
              13     43.3      1756381138        0                                                    SERIAL -1                                                    ON CPU
              12     40.0      1475428744        0                                                    SERIAL -1                                                    ON CPU
               2      6.7               0        0                                                    SERIAL -1                                                    ON CPU
               1      3.3      1756381138        2 TABLE ACCESS FULL                                  SERIAL -1                                                    ON CPU
               1      3.3      1756381138        0 SELECT STATEMENT                                   SERIAL -1                                                    ON CPU
               1      3.3      1756381138        1 SORT AGGREGATE                                     SERIAL -1                                                    ON CPU


GV$ACTIVE_SESSION_HISTORY - px distribution
~~~~~~~~~~~~~~~~~~~~~~~~~

SQL_EXEC_START                 SQL_EXEC_ID SQL_PLAN_HASH_VALUE SQL_PLAN_LINE_ID DOP        PROGRAM                                                        COUNT(*)
------------------------------ ----------- ------------------- ---------------- ---------- ------------------------------------------------------------ ----------
12-APR-21 09.54.58.000000 PM      16777225          1756381138                1 SERIAL     sqlplus@karldevfedora (TNS V1-V3)                                     1
12-APR-21 09.55.08.000000 PM      16777285          1756381138                2 SERIAL     sqlplus@karldevfedora (TNS V1-V3)                                     1

&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; ash elap explained &lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;br&gt;&lt;br&gt;&lt;h2&gt; elapsed time (wall clock) using ASH&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h2&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to http://dboptimizer.com/2011/05/04/sql-execution-times-from-ash/&quot; href=&quot;http://dboptimizer.com/2011/05/04/sql-execution-times-from-ash/&quot; class=&quot;externalLink&quot;&gt;http://dboptimizer.com/2011/05/04/sql-execution-times-from-ash/&lt;/a&gt;&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to http://dboptimizer.com/2011/05/06/sql-timings-for-ash-ii/&quot; href=&quot;http://dboptimizer.com/2011/05/06/sql-timings-for-ash-ii/&quot; class=&quot;externalLink&quot;&gt;http://dboptimizer.com/2011/05/06/sql-timings-for-ash-ii/&lt;/a&gt;&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to http://dboptimizer.com/2011/05/06/sql-ash-timings-iii/&quot; href=&quot;http://dboptimizer.com/2011/05/06/sql-ash-timings-iii/&quot; class=&quot;externalLink&quot;&gt;http://dboptimizer.com/2011/05/06/sql-ash-timings-iii/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt; this is pretty awesome way of characterizing the response times of &lt;a tiddlylink=&quot;SQLs&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQLs&quot; href=&quot;http://karlarao.tiddlyspot.com#SQLs&quot; class=&quot;externalLink null&quot;&gt;SQLs&lt;/a&gt;.. another way of doing this is through 10046 trace and using the Mr. Tools, and there are so many things you can do with both of the tools, another thing I'm interested in (although not related to this tiddler) is getting the IO size distribution from the 10046 along side it is the data coming from ASH which is basically pulling the data from the p1,p2,p3 values of the IO events.. &lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;&lt;pre&gt;[oracle@oel5-11g bin]$ cat ash_test.sh
export DATE=$(date +%Y%m%d%H%M%S%N)

sqlplus &quot;/ as sysdba&quot; &amp;lt;&amp;lt;EOF
set timing on
set echo on
spool all_nodes_full_table_scan_$DATE.log

select /* ash_elapsed */ * from
(select owner, object_name from karltest
where owner = 'SYSTEM'
and object_type = 'TABLE'
union
select owner, object_name from karltest
where owner = 'SYSTEM'
and object_type = 'INDEX')
order by object_name
/

spool off
exit
EOF
[oracle@oel5-11g bin]$
[oracle@oel5-11g bin]$ cat loadtest.sh
(( n=0 ))
while (( n&amp;lt;$1 ));do
(( n=n+1 ))
sh ash_test.sh &amp;amp;
done
&lt;/pre&gt;&lt;br&gt;&lt;pre&gt;[oracle@oel5-11g bin]$ ls -ltr
total 1468
-rwxr-xr-x 1 oracle oinstall    107 Apr 23 08:21 startdb.sh
-rwxr-xr-x 1 oracle oinstall    118 Apr 23 08:21 stopdb.sh
-rw-r--r-- 1 oracle oinstall 127675 May  5 18:12 all_nodes_full_table_scan_20110505181225583938000.log
-rw-r--r-- 1 oracle oinstall 127675 May  5 18:17 all_nodes_full_table_scan_20110505181508275739000.log
-rw-r--r-- 1 oracle oinstall 127675 May  5 18:17 all_nodes_full_table_scan_20110505181508273773000.log
-rw-r--r-- 1 oracle oinstall 127675 May  5 18:17 all_nodes_full_table_scan_20110505181508273060000.log
-rw-r--r-- 1 oracle oinstall 127675 May  5 18:17 all_nodes_full_table_scan_20110505181508269189000.log
-rw-r--r-- 1 oracle oinstall 127675 May  5 18:17 all_nodes_full_table_scan_20110505181508265790000.log
-rw-r--r-- 1 oracle oinstall 127675 May  5 18:17 all_nodes_full_table_scan_20110505181508262532000.log
-rw-r--r-- 1 oracle oinstall 127675 May  5 18:17 all_nodes_full_table_scan_20110505181508259253000.log
-rw-r--r-- 1 oracle oinstall 127675 May  5 18:17 all_nodes_full_table_scan_20110505181508256596000.log
-rw-r--r-- 1 oracle oinstall 127675 May  5 18:17 all_nodes_full_table_scan_20110505181508251337000.log
-rw-r--r-- 1 oracle oinstall 127675 May  5 18:17 all_nodes_full_table_scan_20110505181508245849000.log
-rw-r--r-- 1 oracle oinstall     64 May  5 19:23 loadtest.sh
-rw-r--r-- 1 oracle oinstall    397 May  5 19:23 ash_test.sh
&lt;/pre&gt;&lt;br&gt;&lt;pre&gt;[oracle@oel5-11g bin]$ cat *log | grep Elapsed
Elapsed: 00:00:15.00
Elapsed: 00:02:00.41
Elapsed: 00:02:00.10
Elapsed: 00:02:00.03
Elapsed: 00:02:00.15
Elapsed: 00:02:00.32
Elapsed: 00:02:00.08
Elapsed: 00:02:00.20
Elapsed: 00:01:59.99
Elapsed: 00:02:00.31
Elapsed: 00:02:00.11
&lt;/pre&gt;&lt;br&gt;&lt;pre&gt; SELECT /* example */ substr(sql_text, 1, 80) sql_text,
           sql_id, 
	    hash_value, address, child_number, plan_hash_value, FIRST_LOAD_TIME
      FROM v$sql
     WHERE 
	--sql_id = '6wps6tju5b8tq'
	-- hash_value = 1481129178
	sql_text LIKE '%ash_elapsed%'
       AND sql_text NOT LIKE '%example%' 
      order by first_load_time; 

SQL_TEXT                                                                                                                                                            SQL_ID        HASH_VALUE ADDRESS           CHILD_NUMBER PLAN_HASH_VALUE FIRST_LOAD_TIME
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ------------- ---------- ---------------- ------------ --------------- ----------------------------------------------------------------------------
select /* ash_elapsed */ * from (select owner, object_name from karltest where o                                                                                    gy6j5kg641saa 3426804042 000000006C523480             0      1959977140 2011-05-05/18:12:25
&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;pre&gt;select sql_id, 
      run_time run_time_timestamp, 
 (EXTRACT(HOUR FROM run_time) * 3600
                    + EXTRACT(MINUTE FROM run_time) * 60 
                    + EXTRACT(SECOND FROM run_time)) run_time_sec
from  (
select 
       sql_id,
       max(sample_time - sql_exec_start) run_time 
from 
       dba_hist_active_sess_history 
where
       sql_exec_start is not null 
group by sql_id,SQL_EXEC_ID
order by sql_id 
)
-- where rownum &amp;lt; 100
where sql_id = 'gy6j5kg641saa'
order by sql_id, run_time desc
/

SQL_ID        RUN_TIME_TIMESTAMP                                                          RUN_TIME_SEC
------------- --------------------------------------------------------------------------- ------------
gy6j5kg641saa +000000000 00:01:54.575                                                          114.575
gy6j5kg641saa +000000000 00:01:54.575                                                          114.575
gy6j5kg641saa +000000000 00:01:54.575                                                          114.575
gy6j5kg641saa +000000000 00:01:54.575                                                          114.575
gy6j5kg641saa +000000000 00:01:54.575                                                          114.575
gy6j5kg641saa +000000000 00:01:54.575                                                          114.575
gy6j5kg641saa +000000000 00:01:54.575                                                          114.575
gy6j5kg641saa +000000000 00:01:54.575                                                          114.575
gy6j5kg641saa +000000000 00:01:53.575                                                          113.575
gy6j5kg641saa +000000000 00:01:53.575                                                          113.575
gy6j5kg641saa +000000000 00:00:11.052                                                           11.052

11 rows selected.
&lt;/pre&gt;&lt;br&gt;&lt;pre&gt;select sql_id,  
		count(*),
        round(avg(EXTRACT(HOUR FROM run_time) * 3600
                    + EXTRACT(MINUTE FROM run_time) * 60 
                    + EXTRACT(SECOND FROM run_time)),2) avg , 
        round(min(EXTRACT(HOUR FROM run_time) * 3600
                    + EXTRACT(MINUTE FROM run_time) * 60 
                    + EXTRACT(SECOND FROM run_time)),2) min , 
        round(max(EXTRACT(HOUR FROM run_time) * 3600
                    + EXTRACT(MINUTE FROM run_time) * 60 
                    + EXTRACT(SECOND FROM run_time)),2) max 
from  (
        select 
               sql_id,
               max(sample_time - sql_exec_start) run_time
        from 
               dba_hist_active_sess_history 
        where
               sql_exec_start is not null 
               and sql_id = 'gy6j5kg641saa'
        group by sql_id,SQL_EXEC_ID
        order by sql_id 
       )
-- where rownum &amp;lt; 100
group by sql_id
order by avg desc
/

SQL_ID          COUNT(*)      AVG        MIN        MAX
------------- ---------- -------- ---------- ----------
gy6j5kg641saa         11  104.980      11.05     114.58

&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;span&gt;â&lt;/span&gt; Also verify the data points and avg min max in Excel &lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_F2x5WXOJ6Q8/TcKKM6OwQNI/AAAAAAAABQQ/6AunDw4VDvI/avgminmax.png&quot; title=&quot;picturename&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;pre&gt;SQL&amp;gt; select count(*) from karltest;

  COUNT(*)
----------
   2215968


SQL&amp;gt; insert into karltest select * from dba_objects;

69249 rows created.

Elapsed: 00:00:00.86
SQL&amp;gt; commit;

Commit complete.

SQL&amp;gt; select count(*) from karltest;

  COUNT(*)
----------
     69249



[oracle@oel5-11g bin]$ cat *log | grep Elapsed
Elapsed: 00:00:00.67
Elapsed: 00:00:00.35
Elapsed: 00:00:01.16
Elapsed: 00:00:00.33
Elapsed: 00:00:00.35
Elapsed: 00:00:00.31
Elapsed: 00:00:00.31
Elapsed: 00:00:01.32
Elapsed: 00:00:00.34
Elapsed: 00:00:00.31



 SELECT /* example */ substr(sql_text, 1, 80) sql_text,
           sql_id, 
	    hash_value, address, child_number, plan_hash_value, FIRST_LOAD_TIME
      FROM v$sql
     WHERE 
	--sql_id = '6wps6tju5b8tq'
	-- hash_value = 1481129178
	sql_text LIKE '%ash_elapsed2%'
       AND sql_text NOT LIKE '%example%' 
      order by first_load_time; 



SQL&amp;gt;  SELECT /* example */ substr(sql_text, 1, 80) sql_text,
  2             sql_id,
  3         hash_value, address, child_number, plan_hash_value, FIRST_LOAD_TIME
  4        FROM v$sql
  5       WHERE
  6     --sql_id = '6wps6tju5b8tq'
  7     -- hash_value = 1481129178
  8     sql_text LIKE '%ash_elapsed2%'
  9         AND sql_text NOT LIKE '%example%'
      order by first_load_time;  10

SQL_TEXT                                                                                                                                                            SQL_ID        HASH_VALUE ADDRESS           CHILD_NUMBER PLAN_HASH_VALUE FIRST_LOAD_TIME
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ------------- ---------- ---------------- ------------ --------------- ----------------------------------------------------------------------------
select /* ash_elapsed2 */ * from (select owner, object_name from karltest where                                                                                     4bkcftyvj2j6p 3071362261 000000006C776858             0      1959977140 2011-05-05/19:59:58


SQL&amp;gt; BEGIN
  DBMS_WORKLOAD_REPOSITORY.CREATE_SNAPSHOT ();
END;
/  2    3    4

PL/SQL procedure successfully completed.



SQL&amp;gt; select sql_id,
  2        run_time run_time_timestamp,
  3   (EXTRACT(HOUR FROM run_time) * 3600
                    + EXTRACT(MINUTE FROM run_time) * 60
  4    5                      + EXTRACT(SECOND FROM run_time)) run_time_sec
  6  from  (
  7  select
  8         sql_id,
  9         max(sample_time - sql_exec_start) run_time
 10  from
 11         dba_hist_active_sess_history
 12  where
 13         sql_exec_start is not null
 14  group by sql_id,SQL_EXEC_ID
order by sql_id
 15   16  )
-- where rownum &amp;lt; 100
 17   18  where sql_id = '4bkcftyvj2j6p'
 19  order by sql_id, run_time desc
/ 20

no rows selected
&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h2&gt; Making use of STDDEV on elapsed time&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h2&gt;&lt;br&gt;This gets the avg,min,max,stddev on a specific time window.. then drill down further with a join on dba_hist_active_sess_history with particular filters (module, user, etc.)&lt;br&gt;&lt;br&gt;&lt;pre&gt;
-- CREATE A TEMP TABLE THAT SHOWS AVG,MIN,MAX,STDDEV RESPONSE TIME OF SQLS    
define begin='03/08/2012 14:40'
define end='03/08/2012 14:45'


SYS@fsprd2&amp;gt; create table karl_sql_id2 as
select sql_id,
  2    3                  count(*) count,
  4          round(avg(EXTRACT(HOUR FROM run_time) * 3600
  5                      + EXTRACT(MINUTE FROM run_time) * 60
  6                      + EXTRACT(SECOND FROM run_time)),2) avg ,
  7          round(min(EXTRACT(HOUR FROM run_time) * 3600
  8                      + EXTRACT(MINUTE FROM run_time) * 60
  9                      + EXTRACT(SECOND FROM run_time)),2) min ,
10          round(max(EXTRACT(HOUR FROM run_time) * 3600
11                      + EXTRACT(MINUTE FROM run_time) * 60
12                      + EXTRACT(SECOND FROM run_time)),2) max,
13          round(stddev(EXTRACT(HOUR FROM run_time) * 3600
14                      + EXTRACT(MINUTE FROM run_time) * 60
15                      + EXTRACT(SECOND FROM run_time)),2) stddev
16  from  (
17          select
18                 sql_id,
19                 max(sample_time - sql_exec_start) run_time
20          from
21                 dba_hist_active_sess_history
22          where
23                 sql_exec_start is not null
24                                         and sample_time
25                                         between to_date('&amp;amp;begin', 'MM/DD/YY HH24:MI:SS')
26                                         and to_date('&amp;amp;end', 'MM/DD/YY HH24:MI:SS')
27          group by sql_id,SQL_EXEC_ID
28          order by sql_id
29         )
30  group by sql_id
31  order by avg desc
32  /

Table created.


define _start_time='03/08/2012 14:40'
define _end_time='03/08/2012 14:45'


SYS@fsprd2&amp;gt; select * from karl_sql_id2
where sql_id in
  2    3        (select sql_id from
  4     dba_hist_active_sess_history
  5     where sample_time
  6                                            between to_date('&amp;amp;_start_time', 'MM/DD/YY HH24:MI')
  7                                            and to_date('&amp;amp;_end_time', 'MM/DD/YY HH24:MI')
  8     and lower(module) like 'ex_%')
  9  order by stddev asc;

SQL_ID             COUNT        AVG        MIN        MAX     STDDEV
------------- ---------- ---------- ---------- ---------- ----------
aadkvg74cknvc          1         .8         .8         .8          0
c96tdmv2wu0mb          1        .81        .81        .81          0
03zk40yazk2cj          1        .81        .81        .81          0
89s2kmgjcyg08          1       1.96       1.96       1.96          0
cb5gq5xu04sbb          3        2.6       1.92       3.93       1.15
991y15af5jxx9          5       2.07        .96       5.93       2.16
c2fn0swka653f          6      18.94       9.99      28.99       7.28

7 rows selected.

&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;.&lt;br&gt;&lt;br&gt;</description>
<category>ASH</category>
<link>http://karlarao.tiddlyspot.com#%5B%5BElapsed-AvgMinMax%20%2C%20ash%20elap%20-%20shark%20fin%5D%5D</link>
<pubDate>Tue, 13 Apr 2021 04:13:00 GMT</pubDate>

</item>
<item>
<title>dbms_sqltune.sqltext_to_signature vs force_matching</title>
<description>&lt;div class=&quot;dcTOC&quot;&gt;&lt;a class=&quot;toggleButton&quot; title=&quot;show/collapse table of contents&quot; href=&quot;javascript:;&quot;&gt;/* Table of Contents */&lt;/a&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' test case ', event)&quot;&gt; test case &lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' output ', event)&quot;&gt; output &lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; test case &lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;pre&gt;
set serveroutput on 

VARIABLE sql1 VARCHAR2(100)
VARIABLE sql2 VARCHAR2(100)
VARIABLE sql3 VARCHAR2(100)
VARIABLE sql4 VARCHAR2(100)
VARIABLE sql5 VARCHAR2(100)
VARIABLE sql6 VARCHAR2(100)

BEGIN
  :sql1 := q'[SELECT * FROM dual WHERE dummy = 'X']';
  :sql2 := q'[select  *  from  dual  where  dummy='X']';
  :sql3 := q'[SELECT * FROM dual WHERE dummy = 'x']';
  :sql4 := q'[SELECT * FROM dual WHERE dummy = 'Y']';
  :sql5 := q'[SELECT * FROM dual WHERE dummy = 'X' OR dummy = :b1]';
  :sql6 := q'[SELECT * FROM dual WHERE dummy = 'Y' OR dummy = :b1]';
END;
/

REM
REM get the signature of the SQL statements with FORCE_MATCHING = FALSE (0)
REM

col signature format 999999999999999999999999
SELECT :sql1 sql_text, dbms_sqltune.sqltext_to_signature(:sql1,0) signature FROM dual
UNION ALL
SELECT :sql2 sql_text, dbms_sqltune.sqltext_to_signature(:sql2,0) signature FROM dual
UNION ALL
SELECT :sql3 sql_text, dbms_sqltune.sqltext_to_signature(:sql3,0) signature FROM dual
UNION ALL 
SELECT :sql4 sql_text, dbms_sqltune.sqltext_to_signature(:sql4,0) signature FROM dual
UNION ALL
SELECT :sql5 sql_text, dbms_sqltune.sqltext_to_signature(:sql5,0) signature FROM dual
UNION ALL 
SELECT :sql6 sql_text, dbms_sqltune.sqltext_to_signature(:sql6,0) signature FROM dual;

REM
REM get the signature of the SQL statements with FORCE_MATCHING = TRUE (1)
REM

SELECT :sql1 sql_text, dbms_sqltune.sqltext_to_signature(:sql1,1) signature FROM dual
UNION ALL
SELECT :sql2 sql_text, dbms_sqltune.sqltext_to_signature(:sql2,1) signature FROM dual
UNION ALL
SELECT :sql3 sql_text, dbms_sqltune.sqltext_to_signature(:sql3,1) signature FROM dual
UNION ALL 
SELECT :sql4 sql_text, dbms_sqltune.sqltext_to_signature(:sql4,1) signature FROM dual
UNION ALL
SELECT :sql5 sql_text, dbms_sqltune.sqltext_to_signature(:sql5,1) signature FROM dual
UNION ALL 
SELECT :sql6 sql_text, dbms_sqltune.sqltext_to_signature(:sql6,1) signature FROM dual;

REM
REM what about case insensitive searches?
REM

ALTER SESSION SET nls_sort=binary_ci;
ALTER SESSION SET nls_comp=ansi;

SELECT :sql1 sql_text, dbms_sqltune.sqltext_to_signature(:sql1,0) signature FROM dual
UNION ALL
SELECT :sql2 sql_text, dbms_sqltune.sqltext_to_signature(:sql2,0) signature FROM dual
UNION ALL
SELECT :sql3 sql_text, dbms_sqltune.sqltext_to_signature(:sql3,0) signature FROM dual
UNION ALL 
SELECT :sql4 sql_text, dbms_sqltune.sqltext_to_signature(:sql4,0) signature FROM dual
UNION ALL
SELECT :sql5 sql_text, dbms_sqltune.sqltext_to_signature(:sql5,0) signature FROM dual
UNION ALL 
SELECT :sql6 sql_text, dbms_sqltune.sqltext_to_signature(:sql6,0) signature FROM dual;
&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; output &lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;pre&gt;

SQL_TEXT

                SIGNATURE
-------------------------
SELECT * FROM dual WHERE dummy
      7181225531830258335

select  *  from  dual  where  dummy
      7181225531830258335

SELECT * FROM dual WHERE dummy = 'x
     18443846411346672783


SQL_TEXT

                SIGNATURE
-------------------------
SELECT * FROM dual WHERE dummy
       909903071561515954

SELECT * FROM dual WHERE dummy = 'X' OR dummy = :b
     14508885911807130242

SELECT * FROM dual WHERE dummy = 'Y' OR dummy = :b
       816238779370039768


6 rows selected. 


SQL_TEXT

                SIGNATURE
-------------------------
SELECT * FROM dual WHERE dummy
     10668153635715970930

select  *  from  dual  where  dummy='X'                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
     10668153635715970930

SELECT * FROM dual WHERE dummy = 'x
     10668153635715970930


SQL_TEXT

                SIGNATURE
-------------------------
SELECT * FROM dual WHERE dummy
     10668153635715970930

SELECT * FROM dual WHERE dummy = 'X' OR dummy = :b
     14508885911807130242

SELECT * FROM dual WHERE dummy = 'Y' OR dummy = :b
       816238779370039768


6 rows selected. 


Session altered.


Session altered.


SQL_TEXT

                SIGNATURE
-------------------------
SELECT * FROM dual WHERE dummy
      7181225531830258335

select  *  from  dual  where  dummy
      7181225531830258335

SELECT * FROM dual WHERE dummy = 'x
     18443846411346672783


SQL_TEXT

                SIGNATURE
-------------------------
SELECT * FROM dual WHERE dummy
       909903071561515954

SELECT * FROM dual WHERE dummy = 'X' OR dummy = :b
     14508885911807130242

SELECT * FROM dual WHERE dummy = 'Y' OR dummy = :b
       816238779370039768


6 rows selected. 



&lt;/pre&gt;</description>
<category>force_matching</category>
<link>http://karlarao.tiddlyspot.com#%5B%5Bdbms_sqltune.sqltext_to_signature%20vs%20force_matching%5D%5D</link>
<pubDate>Mon, 12 Apr 2021 04:58:00 GMT</pubDate>

</item>
<item>
<title>.step by step - attach 2 plans to a SQL baseline</title>
<description>&lt;div class=&quot;dcTOC&quot;&gt;&lt;a class=&quot;toggleButton&quot; title=&quot;show/collapse table of contents&quot; href=&quot;javascript:;&quot;&gt;/* Table of Contents */&lt;/a&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' manual way (this is recommended)', event)&quot;&gt; manual way (this is recommended)&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' automatic pickup of plans using evolve ', event)&quot;&gt; automatic pickup of plans using evolve &lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; manual way (this is recommended)&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;br&gt;&lt;pre&gt;
11:11:09 KARLARAO@cdb1&amp;gt; @spm_demo_query.sql

ALL_DISTINCT       SKEW
------------ ----------
           3          3


P_SQLID
-------------
a5jq5khm9w64n

Enter value for p_sqlid: a5jq5khm9w64n

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  a5jq5khm9w64n, child number 0
-------------------------------------
select * from skew where skew=3

Plan hash value: 246648590

--------------------------------------------------------------------------
| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |      |       |       |     8 (100)|          |
|*  1 |  TABLE ACCESS FULL| SKEW |   909 |  6363 |     8  (13)| 00:00:01 |

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter(&quot;SKEW&quot;=3)


18 rows selected.






11:11:43 KARLARAO@cdb1&amp;gt; @spm_baselines
Enter value for sql_text:
Enter value for exact_matching_signature:

no rows selected






-- create the baseline
DECLARE
my_plans pls_integer;
BEGIN
my_plans := DBMS_SPM.LOAD_PLANS_FROM_CURSOR_CACHE(sql_id =&amp;gt; 'a5jq5khm9w64n',plan_hash_value=&amp;gt;'246648590', fixed =&amp;gt;'YES', enabled=&amp;gt;'YES');
END;
/





11:12:52 KARLARAO@cdb1&amp;gt; DECLARE
my_plans pls_integer;
BEGIN
my_plans := DBMS_SPM.LOAD_PLANS_FROM_CURSOR_CACHE(sql_id =&amp;gt; 'a5jq5khm9w64n',plan_hash_value=&amp;gt;'246648590', fixed =&amp;gt;'YES', enabled=&amp;gt;'YES');
END;
/11:18:16   2  11:18:16   3  11:18:16   4  11:18:16   5  11:18:16   6

PL/SQL procedure successfully completed.



11:18:20 KARLARAO@cdb1&amp;gt; @spm_baselines
Enter value for sql_text:
Enter value for exact_matching_signature:

PARSING_ CREATED              PLAN_NAME                                SQL_HANDLE                SQL_TEXT                            OPTIMIZER_COST ENA ACC FIX REP ORIGIN
-------- -------------------- ---------------------------------------- ------------------------- ----------------------------------- -------------- --- --- --- --- --------
KARLARAO 03/23/20 11:18:18    SQL_PLAN_fahs3brrwbxcm950a48a8           SQL_e543035defc5f593      select * from skew where skew=3                  8 YES YES YES YES MANUAL-L
                                                                                                                                                                    OAD






--##############################################################################################################################
created an index but doesn't get used by the SQL_ID 
what needs to be done is create a new SQL_ID with new plan hash value, and add that PHV to the old SQL_ID 
--##############################################################################################################################


11:20:38 KARLARAO@cdb1&amp;gt; @spm_demo_createindex.sql

Index created.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

11:21:27 KARLARAO@cdb1&amp;gt; @spm_demo_fudgestats.sql

PL/SQL procedure successfully completed.

11:21:36 KARLARAO@cdb1&amp;gt; @spm_demo_query.sql

ALL_DISTINCT       SKEW
------------ ----------
           3          3


P_SQLID
-------------
a5jq5khm9w64n

Enter value for p_sqlid: a5jq5khm9w64n

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  a5jq5khm9w64n, child number 0
-------------------------------------
select * from skew where skew=3

Plan hash value: 246648590

--------------------------------------------------------------------------
| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |      |       |       |     2 (100)|          |
|*  1 |  TABLE ACCESS FULL| SKEW |     1 |     1 |     2   (0)| 00:00:01 |

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter(&quot;SKEW&quot;=3)

Note
-----
   - SQL plan baseline SQL_PLAN_fahs3brrwbxcm950a48a8 used for this statement


22 rows selected.

11:21:46 KARLARAO@cdb1&amp;gt; @spm_demo_query.sql

ALL_DISTINCT       SKEW
------------ ----------
           3          3


P_SQLID
-------------
a5jq5khm9w64n

Enter value for p_sqlid: a5jq5khm9w64n

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  a5jq5khm9w64n, child number 0
-------------------------------------
select * from skew where skew=3

Plan hash value: 246648590

--------------------------------------------------------------------------
| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |      |       |       |     2 (100)|          |
|*  1 |  TABLE ACCESS FULL| SKEW |     1 |     1 |     2   (0)| 00:00:01 |

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter(&quot;SKEW&quot;=3)

Note
-----
   - SQL plan baseline SQL_PLAN_fahs3brrwbxcm950a48a8 used for this statement


22 rows selected.

11:21:59 KARLARAO@cdb1&amp;gt; @spm_baselines
Enter value for sql_text:
Enter value for exact_matching_signature:

PARSING_ CREATED              PLAN_NAME                                SQL_HANDLE                SQL_TEXT                            OPTIMIZER_COST ENA ACC FIX REP ORIGIN
-------- -------------------- ---------------------------------------- ------------------------- ----------------------------------- -------------- --- --- --- --- --------
KARLARAO 03/23/20 11:18:18    SQL_PLAN_fahs3brrwbxcm950a48a8           SQL_e543035defc5f593      select * from skew where skew=3                  8 YES YES YES YES MANUAL-L
                                                                                                                                                                    OAD








--## regather stats 
exec dbms_stats.gather_index_stats(user,'SKEW_IDX', no_invalidate =&amp;gt; false); 
exec dbms_stats.gather_table_stats(user,'SKEW', no_invalidate =&amp;gt; false);





--## index was picked up 

11:28:22 KARLARAO@cdb1&amp;gt; @spm_demo_query2.sql

ALL_DISTINCT       SKEW
------------ ----------
           3          3


P_SQLID
-------------
693ccxff9a8ku

Enter value for p_sqlid: 693ccxff9a8ku

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  693ccxff9a8ku, child number 0
-------------------------------------
select /* new */ * from skew where skew=3

Plan hash value: 1949605896

------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name     | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |          |       |       |     2 (100)|          |
|   1 |  TABLE ACCESS BY INDEX ROWID BATCHED| SKEW     |     1 |     7 |     2   (0)| 00:00:01 |

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|*  2 |   INDEX RANGE SCAN                  | SKEW_IDX |     1 |       |     1   (0)| 00:00:01 |
------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access(&quot;SKEW&quot;=3)


19 rows selected.










--## use coe.sql to force index to the OLD SQL_ID 
-- edit the output sql file to match the text of OLD SQL_ID 

SQL&amp;gt;set lines 300
SQL&amp;gt;set serveroutput off
select * from skew where skew=3;
select * from table(dbms_xplan.display_cursor);SQL&amp;gt;
ALL_DISTINCT       SKEW
------------ ----------
           3          3

SQL&amp;gt;

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  a5jq5khm9w64n, child number 0
-------------------------------------
select * from skew where skew=3

Plan hash value: 1949605896

------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name     | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |          |       |       |     2 (100)|          |
|   1 |  TABLE ACCESS BY INDEX ROWID BATCHED| SKEW     |     1 |     7 |     2   (0)| 00:00:01 |

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|*  2 |   INDEX RANGE SCAN                  | SKEW_IDX |     1 |       |     1   (0)| 00:00:01 |
------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access(&quot;SKEW&quot;=3)

Note
-----
   - SQL profile coe_693ccxff9a8ku_1949605896 used for this statement

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


23 rows selected.





SQL&amp;gt;@spm_baselines
Enter value for sql_text:
Enter value for exact_matching_signature:

PARSING_ CREATED              PLAN_NAME                                SQL_HANDLE                SQL_TEXT                            OPTIMIZER_COST ENA ACC FIX REP ORIGIN
-------- -------------------- ---------------------------------------- ------------------------- ----------------------------------- -------------- --- --- --- --- --------
KARLARAO 03/23/20 11:18:18    SQL_PLAN_fahs3brrwbxcm950a48a8           SQL_e543035defc5f593      select * from skew where skew=3                  8 YES YES YES YES MANUAL-L
                                                                                                                                                                    OAD







      
-- add the other plan
-- you can even use a different SQL_ID, what matters is the text matches the EXACT_MATCHING_SIGNATURE to be tied to SQL_HANDLE as a new SQL PLAN_NAME
DECLARE
my_plans pls_integer;
BEGIN
my_plans := DBMS_SPM.LOAD_PLANS_FROM_CURSOR_CACHE(sql_id =&amp;gt; 'a5jq5khm9w64n',plan_hash_value=&amp;gt;'1949605896', fixed =&amp;gt;'YES', enabled=&amp;gt;'YES');
END;
/





-- SQL HANDLE is the same, there's a new PLAN NAME


SQL&amp;gt;@spm_baselines
Enter value for sql_text:
Enter value for exact_matching_signature:

PARSING_ CREATED              PLAN_NAME                                SQL_HANDLE                SQL_TEXT                            OPTIMIZER_COST ENA ACC FIX REP ORIGIN
-------- -------------------- ---------------------------------------- ------------------------- ----------------------------------- -------------- --- --- --- --- --------
KARLARAO 03/23/20 11:18:18    SQL_PLAN_fahs3brrwbxcm950a48a8           SQL_e543035defc5f593      select * from skew where skew=3                  8 YES YES YES YES MANUAL-L
                                                                                                                                                                    OAD

KARLARAO 03/23/20 11:41:32    SQL_PLAN_fahs3brrwbxcm08e93fe4           SQL_e543035defc5f593      select * from skew where skew=3                  2 YES YES YES YES MANUAL-L
                                                                                                                                                                    OAD







-- verify
set lines 300
set serveroutput off
select * from skew where skew=3;
select * from table(dbms_xplan.display_cursor);

 
 



Connected.
11:42:26 KARLARAO@cdb1&amp;gt;
set lines 300
set serveroutput off
select * from skew where skew=3;
select * from table(dbms_xplan.display_cursor);11:42:27 KARLARAO@cdb1&amp;gt; 11:42:27 KARLARAO@cdb1&amp;gt; 11:42:27 KARLARAO@cdb1&amp;gt;
ALL_DISTINCT       SKEW
------------ ----------
           3          3

11:42:27 KARLARAO@cdb1&amp;gt;

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  a5jq5khm9w64n, child number 0
-------------------------------------
select * from skew where skew=3

Plan hash value: 1949605896

------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name     | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |          |       |       |     2 (100)|          |
|   1 |  TABLE ACCESS BY INDEX ROWID BATCHED| SKEW     |     1 |     7 |     2   (0)| 00:00:01 |

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|*  2 |   INDEX RANGE SCAN                  | SKEW_IDX |     1 |       |     1   (0)| 00:00:01 |
------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access(&quot;SKEW&quot;=3)

Note
-----
   - SQL profile coe_693ccxff9a8ku_1949605896 used for this statement

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   - SQL plan baseline SQL_PLAN_fahs3brrwbxcm08e93fe4 used for this statement


24 rows selected.







--## drop sql profile and verify baseline 
exec dbms_sqltune.drop_sql_profile(name =&amp;gt; '&amp;amp;profile_name');


11:46:10 KARLARAO@cdb1&amp;gt; set lines 300
set serveroutput off
select * from skew where skew=3;
select * from table(dbms_xplan.display_cursor);11:46:11 KARLARAO@cdb1&amp;gt; 11:46:11 KARLARAO@cdb1&amp;gt;
ALL_DISTINCT       SKEW
------------ ----------
           3          3

11:46:11 KARLARAO@cdb1&amp;gt;

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  a5jq5khm9w64n, child number 0
-------------------------------------
select * from skew where skew=3

Plan hash value: 1949605896

------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name     | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |          |       |       |     2 (100)|          |
|   1 |  TABLE ACCESS BY INDEX ROWID BATCHED| SKEW     |     1 |     7 |     2   (0)| 00:00:01 |

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|*  2 |   INDEX RANGE SCAN                  | SKEW_IDX |     1 |       |     1   (0)| 00:00:01 |
------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access(&quot;SKEW&quot;=3)

Note
-----
   - SQL plan baseline SQL_PLAN_fahs3brrwbxcm08e93fe4 used for this statement

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


23 rows selected.






--## here you'll see two plans 


11:46:34 KARLARAO@cdb1&amp;gt; @spm_baselines
Enter value for sql_text:
Enter value for exact_matching_signature:

PARSING_ CREATED              PLAN_NAME                                SQL_HANDLE                SQL_TEXT                            OPTIMIZER_COST ENA ACC FIX REP ORIGIN
-------- -------------------- ---------------------------------------- ------------------------- ----------------------------------- -------------- --- --- --- --- --------
KARLARAO 03/23/20 11:18:18    SQL_PLAN_fahs3brrwbxcm950a48a8           SQL_e543035defc5f593      select * from skew where skew=3                  8 YES YES YES YES MANUAL-L
                                                                                                                                                                    OAD

KARLARAO 03/23/20 11:41:32    SQL_PLAN_fahs3brrwbxcm08e93fe4           SQL_e543035defc5f593      select * from skew where skew=3                  2 YES YES YES YES MANUAL-L
                                                                                                                                                                    OAD


11:46:38 KARLARAO@cdb1&amp;gt;
11:46:38 KARLARAO@cdb1&amp;gt; @spm_plans
Enter value for sql_handle: SQL_e543035defc5f593

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------
SQL handle: SQL_e543035defc5f593
SQL text: select * from skew where skew=3
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Plan name: SQL_PLAN_fahs3brrwbxcm08e93fe4         Plan id: 149503972
Enabled: YES     Fixed: YES     Accepted: YES     Origin: MANUAL-LOAD
Plan rows: From dictionary
--------------------------------------------------------------------------------

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Plan hash value: 1949605896

--------------------------------------------------------
| Id  | Operation                           | Name     |
--------------------------------------------------------
|   0 | SELECT STATEMENT                    |          |
|   1 |  TABLE ACCESS BY INDEX ROWID BATCHED| SKEW     |
|   2 |   INDEX RANGE SCAN                  | SKEW_IDX |
--------------------------------------------------------


PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Plan name: SQL_PLAN_fahs3brrwbxcm950a48a8         Plan id: 2500479144
Enabled: YES     Fixed: YES     Accepted: YES     Origin: MANUAL-LOAD
Plan rows: From dictionary
--------------------------------------------------------------------------------

Plan hash value: 246648590

----------------------------------
| Id  | Operation         | Name |
----------------------------------

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |      |
|   1 |  TABLE ACCESS FULL| SKEW |
----------------------------------

36 rows selected.






--## let's try to disable that baseline 

set verify off
declare
myplan pls_integer;
begin
myplan:=DBMS_SPM.ALTER_SQL_PLAN_BASELINE (sql_handle =&amp;gt; '&amp;amp;sql_handle',plan_name  =&amp;gt; '&amp;amp;plan_name',attribute_name =&amp;gt; 'ENABLED',   attribute_value =&amp;gt; '&amp;amp;YES_OR_NO');
end;
/



set verify off
declare
myplan pls_integer;
begin
myplan:=DBMS_SPM.ALTER_SQL_PLAN_BASELINE (sql_handle =&amp;gt; '&amp;amp;sql_handle',plan_name  =&amp;gt; '&amp;amp;plan_name',attribute_name =&amp;gt; 'ENABLED',   attribute_value =&amp;gt; '&amp;amp;YES_OR_NO');
end;
/11:49:35 KARLARAO@cdb1&amp;gt; 11:49:35 KARLARAO@cdb1&amp;gt; 11:49:35   2  11:49:35   3  11:49:35   4  11:49:35   5  11:49:35   6
Enter value for sql_handle: SQL_e543035defc5f593
Enter value for plan_name: SQL_PLAN_fahs3brrwbxcm08e93fe4
Enter value for yes_or_no: no

PL/SQL procedure successfully completed.


 @spm_baselines
Enter value for sql_text:
Enter value for exact_matching_signature:

PARSING_ CREATED              PLAN_NAME                                SQL_HANDLE                SQL_TEXT                            OPTIMIZER_COST ENA ACC FIX REP ORIGIN
-------- -------------------- ---------------------------------------- ------------------------- ----------------------------------- -------------- --- --- --- --- --------
KARLARAO 03/23/20 11:18:18    SQL_PLAN_fahs3brrwbxcm950a48a8           SQL_e543035defc5f593      select * from skew where skew=3                  8 YES YES YES YES MANUAL-L
                                                                                                                                                                    OAD

KARLARAO 03/23/20 11:41:32    SQL_PLAN_fahs3brrwbxcm08e93fe4           SQL_e543035defc5f593      select * from skew where skew=3                  2 NO  YES YES YES MANUAL-L
                                                                                                                                                                    OAD





--## after disabling the full scan baseline was used 



11:50:04 KARLARAO@cdb1&amp;gt; set lines 300
set serveroutput off
select * from skew where skew=3;
select * from table(dbms_xplan.display_cursor);11:50:31 KARLARAO@cdb1&amp;gt; 11:50:31 KARLARAO@cdb1&amp;gt;
ALL_DISTINCT       SKEW
------------ ----------
           3          3

11:50:31 KARLARAO@cdb1&amp;gt;

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  a5jq5khm9w64n, child number 1
-------------------------------------
select * from skew where skew=3

Plan hash value: 246648590

--------------------------------------------------------------------------
| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |      |       |       |     8 (100)|          |
|*  1 |  TABLE ACCESS FULL| SKEW |     1 |     7 |     8  (13)| 00:00:01 |

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter(&quot;SKEW&quot;=3)

Note
-----
   - SQL plan baseline SQL_PLAN_fahs3brrwbxcm950a48a8 used for this statement


22 rows selected.






--## let's disable the remaining baseline 



--## here the optimizer picked up the index 

set lines 300
set serveroutput off
select * from skew where skew=3;
select * from table(dbms_xplan.display_cursor);



11:52:49 KARLARAO@cdb1&amp;gt; set lines 300
set serveroutput off
select * from skew where skew=3;
select * from table(dbms_xplan.display_cursor);11:53:17 KARLARAO@cdb1&amp;gt; 11:53:17 KARLARAO@cdb1&amp;gt;
ALL_DISTINCT       SKEW
------------ ----------
           3          3

11:53:17 KARLARAO@cdb1&amp;gt;

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  a5jq5khm9w64n, child number 0
-------------------------------------
select * from skew where skew=3

Plan hash value: 1949605896

------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name     | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |          |       |       |     2 (100)|          |
|   1 |  TABLE ACCESS BY INDEX ROWID BATCHED| SKEW     |     1 |     7 |     2   (0)| 00:00:01 |

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|*  2 |   INDEX RANGE SCAN                  | SKEW_IDX |     1 |       |     1   (0)| 00:00:01 |
------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access(&quot;SKEW&quot;=3)


19 rows selected.








-- code to drop the individual baselines 


set verify off
DECLARE
  plans_dropped    PLS_INTEGER;
BEGIN
  plans_dropped := DBMS_SPM.drop_sql_plan_baseline (
sql_handle =&amp;gt; '&amp;amp;sql_handle',
plan_name  =&amp;gt; '&amp;amp;plan_name');
DBMS_OUTPUT.put_line(plans_dropped);
END;
 /




&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; automatic pickup of plans using evolve &lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;pre&gt;
20:02:22 KARLARAO@cdb1&amp;gt; @spm_demo_query.sql

ALL_DISTINCT       SKEW
------------ ----------
           3          3


PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  a5jq5khm9w64n, child number 1
-------------------------------------
select * from skew where skew=3

Plan hash value: 246648590

--------------------------------------------------------------------------
| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |      |       |       |     8 (100)|          |
|*  1 |  TABLE ACCESS FULL| SKEW |     1 |     7 |     8  (13)| 00:00:01 |

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter(&quot;SKEW&quot;=3)

Note
-----
   - SQL plan baseline SQL_PLAN_fahs3brrwbxcm950a48a8 used for this statement


22 rows selected.

20:02:31 KARLARAO@cdb1&amp;gt; @spm_baselines.sql
Enter value for sql_text:
Enter value for exact_matching_signature:

PARSING_ CREATED              PLAN_NAME                                SQL_HANDLE                SQL_TEXT                            OPTIMIZER_COST ENA ACC FIX REP ORIGIN
-------- -------------------- ---------------------------------------- ------------------------- ----------------------------------- -------------- --- --- --- --- --------

KARLARAO 03/22/20 19:58:58    SQL_PLAN_fahs3brrwbxcm950a48a8           SQL_e543035defc5f593      select * from skew where skew=3                  2 YES YES NO  YES AUTO-CAP
                                                                                                                                                                    TURE

KARLARAO 03/22/20 20:01:58    SQL_PLAN_fahs3brrwbxcm08e93fe4           SQL_e543035defc5f593      select * from skew where skew=3                  2 YES NO  NO  YES AUTO-CAP
                                                                                                                                                                    TURE



20:02:42 KARLARAO@cdb1&amp;gt; @spm_plans
Enter value for sql_handle: SQL_e543035defc5f593

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------
SQL handle: SQL_e543035defc5f593
SQL text: select * from skew where skew=3
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Plan name: SQL_PLAN_fahs3brrwbxcm08e93fe4         Plan id: 149503972
Enabled: YES     Fixed: NO      Accepted: NO      Origin: AUTO-CAPTURE
Plan rows: From dictionary
--------------------------------------------------------------------------------

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Plan hash value: 1949605896

--------------------------------------------------------
| Id  | Operation                           | Name     |
--------------------------------------------------------
|   0 | SELECT STATEMENT                    |          |
|   1 |  TABLE ACCESS BY INDEX ROWID BATCHED| SKEW     |
|   2 |   INDEX RANGE SCAN                  | SKEW_IDX |
--------------------------------------------------------


PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Plan name: SQL_PLAN_fahs3brrwbxcm950a48a8         Plan id: 2500479144
Enabled: YES     Fixed: NO      Accepted: YES     Origin: AUTO-CAPTURE
Plan rows: From dictionary
--------------------------------------------------------------------------------

Plan hash value: 246648590

----------------------------------
| Id  | Operation         | Name |
----------------------------------

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |      |
|   1 |  TABLE ACCESS FULL| SKEW |
----------------------------------

36 rows selected.









10:48:47 KARLARAO@cdb1&amp;gt;  @spm_evolve.sql
Enter value for sql_handle: SQL_e543035defc5f593
Enter value for verify: yes
Enter value for commit: yes
GENERAL INFORMATION SECTION
---------------------------------------------------------------------------------------------

 Task Information:
 ---------------------------------------------
 Task Name            : TASK_33661
 Task Owner           : KARLARAO
 Execution Name       : EXEC_36257
 Execution Type       : SPM EVOLVE
 Scope                : COMPREHENSIVE
 Status               : COMPLETED
 Started              : 03/23/2020 10:48:59
 Finished             : 03/23/2020 10:48:59
 Last Updated         : 03/23/2020 10:48:59
 Global Time Limit    : 2147483646
 Per-Plan Time Limit  : UNUSED
 Number of Errors     : 0
---------------------------------------------------------------------------------------------

SUMMARY
SECTION
---------------------------------------------------------------------------------------------
  Number of plans processed  : 1
  Number of findings         : 2
  Number of recommendations  : 1
  Number of errors           : 0
---------------------------------------------------------------------------------------------

DETAILS SECTION
---------------------------------------------------------------------------------------------
 Object ID          : 2
 Test Plan Name     : SQL_PLAN_fahs3brrwbxcm08e93fe4
 Base Plan Name     : SQL_PLAN_fahs3brrwbxcm950a48a8
 SQL Handle         : SQL_e543035defc5f593
 Parsing Schema     : KARLARAO
 Test Plan Creator  : KARLARAO

 SQL Text           : select * from skew where skew=3

Execution Statistics:
-----------------------------
                    Base Plan                     Test Plan
                    ----------------------------  ----------------------------
 Elapsed Time (s):  .000044                       .000003
 CPU Time (s):      .000019                       0
 Buffer Gets:       2                             0
 Optimizer Cost:    8                             2
 Disk Reads:        0                             0
 Direct Writes:     0                             0
 Rows Processed:    0                             0
 Executions:        10
10


FINDINGS SECTION
---------------------------------------------------------------------------------------------

Findings (2):
-----------------------------
 1. The plan was verified in 0.11000 seconds. It passed the benefit criterion
    because its verified performance was 6.67303 times better than that of the
    baseline plan.
 2. The plan was automatically accepted.

Recommendation:
-----------------------------
 Consider accepting the plan.


EXPLAIN PLANS SECTION
---------------------------------------------------------------------------------------------

Baseline Plan
-----------------------------
 Plan Id          : 42237
 Plan Hash Value  : 2500479144


---------------------------------------------------------------------
| Id  | Operation           | Name | Rows | Bytes | Cost | Time     |
---------------------------------------------------------------------
|   0 | SELECT STATEMENT    |      |    1 |     7 |    8 | 00:00:01 |
| * 1 |   TABLE ACCESS FULL | SKEW |    1 |     7 |    8 | 00:00:01 |
---------------------------------------------------------------------

Predicate Information (identified by operation id):
------------------------------------------
* 1 - filter(&quot;SKEW&quot;=3)


Test Plan
-----------------------------
 Plan Id          : 42238
 Plan Hash Value  : 149503972

-------------------------------------------------------------------------------------------
| Id  | Operation                             | Name     | Rows | Bytes | Cost | Time
|
-------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                      |          |    1 |     7 |    2 | 00:00:01 |
|   1 |   TABLE ACCESS BY INDEX ROWID BATCHED | SKEW     |    1 |     7 |    2 | 00:00:01 |
| * 2 |    INDEX RANGE SCAN                   | SKEW_IDX |    1 |       |    1 | 00:00:01 |
-------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
------------------------------------------
* 2 - access(&quot;SKEW&quot;=3)

---------------------------------------------------------------------------------------------

PL/SQL procedure successfully completed.











10:52:32 KARLARAO@cdb1&amp;gt; @spm_plans
Enter value for sql_handle: SQL_e543035defc5f593

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------
SQL handle: SQL_e543035defc5f593
SQL text: select * from skew where skew=3
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Plan name: SQL_PLAN_fahs3brrwbxcm08e93fe4         Plan id: 149503972
Enabled: YES     Fixed: NO      Accepted: YES     Origin: AUTO-CAPTURE
Plan rows: From dictionary
--------------------------------------------------------------------------------

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Plan hash value: 1949605896

--------------------------------------------------------
| Id  | Operation                           | Name     |
--------------------------------------------------------
|   0 | SELECT STATEMENT                    |          |
|   1 |  TABLE ACCESS BY INDEX ROWID BATCHED| SKEW     |
|   2 |   INDEX RANGE SCAN                  | SKEW_IDX |
--------------------------------------------------------


PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Plan name: SQL_PLAN_fahs3brrwbxcm950a48a8         Plan id: 2500479144
Enabled: YES     Fixed: NO      Accepted: YES     Origin: AUTO-CAPTURE
Plan rows: From dictionary
--------------------------------------------------------------------------------

Plan hash value: 246648590

----------------------------------
| Id  | Operation         | Name |
----------------------------------

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |      |
|   1 |  TABLE ACCESS FULL| SKEW |
----------------------------------

36 rows selected.











10:53:09 KARLARAO@cdb1&amp;gt; @spm_baselines
Enter value for sql_text:
Enter value for exact_matching_signature:

PARSING_ CREATED              PLAN_NAME                                SQL_HANDLE                SQL_TEXT                            OPTIMIZER_COST ENA ACC FIX REP ORIGIN
-------- -------------------- ---------------------------------------- ------------------------- ----------------------------------- -------------- --- --- --- --- --------

KARLARAO 03/22/20 19:58:58    SQL_PLAN_fahs3brrwbxcm950a48a8           SQL_e543035defc5f593      select * from skew where skew=3                  2 YES YES NO  YES AUTO-CAP
                                                                                                                                                                    TURE


KARLARAO 03/22/20 20:01:58    SQL_PLAN_fahs3brrwbxcm08e93fe4           SQL_e543035defc5f593      select * from skew where skew=3                  2 YES YES NO  YES AUTO-CAP
                                                                                                                                                                    TURE








10:56:04 KARLARAO@cdb1&amp;gt; set serveroutput off
10:56:14 KARLARAO@cdb1&amp;gt; select * from skew where skew=3;
select * from table(dbms_xplan.display_cursor);
ALL_DISTINCT       SKEW
------------ ----------
           3          3

10:56:16 KARLARAO@cdb1&amp;gt;

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  a5jq5khm9w64n, child number 0
-------------------------------------
select * from skew where skew=3

Plan hash value: 1949605896

------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name     | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |          |       |       |     2 (100)|          |
|   1 |  TABLE ACCESS BY INDEX ROWID BATCHED| SKEW     |     1 |     7 |     2   (0)| 00:00:01 |

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|*  2 |   INDEX RANGE SCAN                  | SKEW_IDX |     1 |       |     1   (0)| 00:00:01 |
------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access(&quot;SKEW&quot;=3)

Note
-----
   - SQL plan baseline SQL_PLAN_fahs3brrwbxcm08e93fe4 used for this statement

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


23 rows selected.






&lt;/pre&gt;</description>
<category>..step by step SQL Profile and Baseline</category>
<link>http://karlarao.tiddlyspot.com#%5B%5B.step%20by%20step%20-%20attach%202%20plans%20to%20a%20SQL%20baseline%5D%5D</link>
<pubDate>Mon, 12 Apr 2021 03:06:00 GMT</pubDate>

</item>
<item>
<title>OCI hugepages, oracle cloud hugepages</title>
<description>&lt;blockquote&gt;my experience: &lt;br&gt;&lt;ul&gt;&lt;li&gt; automatically configured in &lt;a tiddlylink=&quot;X8M&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#X8M&quot; href=&quot;http://karlarao.tiddlyspot.com#X8M&quot; class=&quot;externalLink null&quot;&gt;X8M&lt;/a&gt;&lt;/li&gt;&lt;li&gt; &lt;a tiddlylink=&quot;CDBs&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#CDBs&quot; href=&quot;http://karlarao.tiddlyspot.com#CDBs&quot; class=&quot;externalLink null&quot;&gt;CDBs&lt;/a&gt; are set to use_large_pages=ONLY &lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to https://blog.pythian.com/hugepages-for-oracle-database-in-oracle-cloud/&quot; href=&quot;https://blog.pythian.com/hugepages-for-oracle-database-in-oracle-cloud/&quot; class=&quot;externalLink&quot;&gt;https://blog.pythian.com/hugepages-for-oracle-database-in-oracle-cloud/&lt;/a&gt;&lt;br&gt;</description>
<category>HugePages</category>
<link>http://karlarao.tiddlyspot.com#%5B%5BOCI%20hugepages%2C%20oracle%20cloud%20hugepages%5D%5D</link>
<pubDate>Sat, 10 Apr 2021 14:37:00 GMT</pubDate>

</item>
<item>
<title>EXACS - exadata cloud service oci</title>
<description>.</description>
<category>EXACC - Exadata Cloud at Customer</category>
<link>http://karlarao.tiddlyspot.com#%5B%5BEXACS%20-%20exadata%20cloud%20service%20oci%5D%5D</link>
<pubDate>Sat, 10 Apr 2021 14:34:00 GMT</pubDate>

</item>
<item>
<title>.disable sql profile and baselines</title>
<description>&lt;blockquote&gt;QUESTION:&lt;br&gt;is there a way to ignore hints AND profiles through 1 single parameter?&lt;br&gt;like **** you all hints and profiles i hate you!&lt;br&gt; or is the only way to do this is set _optimizer_ignore_hints and disable/drop all profiles ?&lt;br&gt;&lt;br&gt;ANSWER: &lt;br&gt;For profiles: ALTER SESSION SET &lt;a tiddlylink=&quot;SQLTUNE_CATEGORY&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQLTUNE_CATEGORY&quot; href=&quot;http://karlarao.tiddlyspot.com#SQLTUNE_CATEGORY&quot; class=&quot;externalLink null&quot;&gt;SQLTUNE_CATEGORY&lt;/a&gt; = 'IGNOREMENOW';&lt;br&gt;For baselines: ALTER SESSION SET &lt;a tiddlylink=&quot;OPTIMIZER_USE_SQL_PLAN_BASELINES&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#OPTIMIZER_USE_SQL_PLAN_BASELINES&quot; href=&quot;http://karlarao.tiddlyspot.com#OPTIMIZER_USE_SQL_PLAN_BASELINES&quot; class=&quot;externalLink null&quot;&gt;OPTIMIZER_USE_SQL_PLAN_BASELINES&lt;/a&gt;=false&lt;br&gt;&lt;br&gt;just everything off, these are the knobs :)  because gluent doesn't like having &lt;a tiddlylink=&quot;USE_NL&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#USE_NL&quot; href=&quot;http://karlarao.tiddlyspot.com#USE_NL&quot; class=&quot;externalLink null&quot;&gt;USE_NL&lt;/a&gt; hint on offloaded tables it errors with &lt;a tiddlylink=&quot;KUP-04108&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#KUP-04108&quot; href=&quot;http://karlarao.tiddlyspot.com#KUP-04108&quot; class=&quot;externalLink null&quot;&gt;KUP-04108&lt;/a&gt;: unable to reread file&lt;br&gt;just in case the developers have to deal with 1000+ &lt;a tiddlylink=&quot;SQLs&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQLs&quot; href=&quot;http://karlarao.tiddlyspot.com#SQLs&quot; class=&quot;externalLink null&quot;&gt;SQLs&lt;/a&gt; we know how to attack this with these knobs&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;OTHER WAYS OF DISABLING: &lt;br&gt;&lt;a tiddlylink=&quot;IGNORE_OPTIM_EMBEDDED_HINTS&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#IGNORE_OPTIM_EMBEDDED_HINTS&quot; href=&quot;http://karlarao.tiddlyspot.com#IGNORE_OPTIM_EMBEDDED_HINTS&quot; class=&quot;externalLink null&quot;&gt;IGNORE_OPTIM_EMBEDDED_HINTS&lt;/a&gt; &amp;lt;- disables hints at session level  &lt;br&gt;&lt;pre&gt;select /*+ index(DEPT) ignore_optim_embedded_hints */ * from SCOTT.DEPT;
&lt;/pre&gt;optimizer_ignore_hints &amp;lt;- database wide or session level through trigger&lt;br&gt;&lt;pre&gt;alter session set optimizer_ignore_hints=true;
alter session set optimizer_ignore_parallel_hints=true;
&lt;/pre&gt;&lt;/blockquote&gt;</description>
<category>SQLProfiles</category>
<link>http://karlarao.tiddlyspot.com#%5B%5B.disable%20sql%20profile%20and%20baselines%5D%5D</link>
<pubDate>Thu, 08 Apr 2021 17:05:00 GMT</pubDate>

</item>
<item>
<title>VST optimized CTE and onion approach same query logic</title>
<description>&lt;div class=&quot;dcTOC&quot;&gt;&lt;a class=&quot;toggleButton&quot; title=&quot;show/collapse table of contents&quot; href=&quot;javascript:;&quot;&gt;/* Table of Contents */&lt;/a&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' rewrite process ', event)&quot;&gt; rewrite process &lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' query logic before rewrite', event)&quot;&gt; query logic before rewrite&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' query logic after rewrite', event)&quot;&gt; query logic after rewrite&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' query logic onion approach', event)&quot;&gt; query logic onion approach&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' how do you compare 2 queries and say if they are logically equivalent?', event)&quot;&gt; how do you compare 2 queries and say if they are logically equivalent?&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' the SQLs', event)&quot;&gt; the SQLs&lt;/a&gt;&lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' original 2.6hours', event)&quot;&gt; original 2.6hours&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' 2nd version - optimized CTE', event)&quot;&gt; 2nd version - optimized CTE&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollToHeading('', ' 3rd version - onion approach ', event)&quot;&gt; 3rd version - onion approach &lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; rewrite process &lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;ul&gt;&lt;li&gt; was able to rewrite the query, now runs 45secs in OUHUBPRD and 86secs in OUHUBDEV&lt;/li&gt;&lt;li&gt; transformed the correlated query cisadm.ci_per_name, cisadm.ci_acct_per to a join on cisadm.ci_sa &lt;/li&gt;&lt;li&gt; i retained the other one as correlated because it's just 80+ rows &lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;pre&gt;cisa_cte_tmp as
(SELECT/*+parallel(12)*/ t1.sa_id,
sa.acct_id,
t1.customer,
sa.sa_type_cd,
(SELECT rev_cl_cd
FROM cisadm.ci_sa_type
WHERE sa_type_cd = sa.sa_type_cd) revn_cls
FROM cisadm.ci_sa sa
left join
(
SELECT/*+ parallel(8) */ sa.sa_id, a.entity_name customer
FROM cisadm.ci_per_name a, cisadm.ci_acct_per b, cisadm.ci_sa sa
WHERE a.per_id = b.per_id
and b.acct_id = sa.acct_id
and a.prim_name_sw = 'Y'
and b.main_cust_sw = 'Y'
) t1
on t1.sa_id = sa.sa_id) 

&lt;/pre&gt;&lt;br&gt;&lt;h1&gt; query logic before rewrite&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/113662855-ee1b3580-9676-11eb-9ae2-61f5d027954d.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; query logic after rewrite&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/113662858-ef4c6280-9676-11eb-8d6f-05faf9c72f82.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; query logic onion approach&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;ul&gt;&lt;li&gt; the outer onion is the last query (A7)&lt;/li&gt;&lt;/ul&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/3683046/113662860-efe4f900-9676-11eb-81df-9365af0587c7.png&quot; title=&quot;SHIFT-CLICK=show full size, CTRL-CLICK=restore initial size&quot; style=&quot;width: 100%; height: 100%; cursor: move;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; how do you compare 2 queries and say if they are logically equivalent?&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;blockquote&gt;when I hit the number 7044266 rows on that &lt;a tiddlylink=&quot;CI_SA&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#CI_SA&quot; href=&quot;http://karlarao.tiddlyspot.com#CI_SA&quot; class=&quot;externalLink null&quot;&gt;CI_SA&lt;/a&gt; row source that gave me assurance that i'm not altering the result. and if you see the structure on the viz remained the same then logically they are the same. and also you need to actually eyeball the result&lt;br&gt;that's why i generated the VST before and after rewrite&lt;br&gt;&lt;br&gt;also do a CTAS on the original and new query, and do a SELECT MINUS SELECT to make sure both results are the same&lt;br&gt;&lt;br&gt;select * from t2 minus select * from t3&lt;br&gt;and then switch positions&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt; the &lt;a tiddlylink=&quot;SQLs&quot; refresh=&quot;link&quot; target=&quot;_blank&quot; title=&quot;External link to http://karlarao.tiddlyspot.com#SQLs&quot; href=&quot;http://karlarao.tiddlyspot.com#SQLs&quot; class=&quot;externalLink null&quot;&gt;SQLs&lt;/a&gt;&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h2&gt; original 2.6hours&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h2&gt;&lt;pre&gt; WITH dtrng
     AS (SELECT mnth
         FROM   (SELECT DISTINCT To_char(dt, 'YYYYMM') mnth
                 FROM   (SELECT LEVEL   n,
                                Add_months(Trunc(SYSDATE, 'YEAR')-1, -12)
                                + LEVEL AS dt
                         FROM   dual
                         CONNECT BY LEVEL &amp;lt;= ( Add_months(Trunc(SYSDATE, 'MM'),
                                               -1) -
                                               Add_months(Trunc(SYSDATE,
                                                          'YEAR'), -13)
                                                         ))x
                 ORDER  BY 1)),
     sas
     AS (SELECT
        /*+parallel(12)*/ x.*
         FROM   (SELECT rh.sa_id,
                        rh.rs_cd,
                        rc.char_val                 tariff,
                        rh.effdt                    rheffdt,
                        rc.effdt                    rceffdt,
                        Rank()
                          over (
                            PARTITION BY rh.sa_id
                            ORDER BY rh.effdt DESC) rnk
                 FROM   cisadm.ci_sa_rs_hist rh
                        join cisadm.ci_rc_char rc
                          ON ( rh.rs_cd = rc.rs_cd )
                 WHERE  rc.char_type_cd = 'RATEALPH')x
         WHERE  rnk = 1)
SELECT /*+parallel(12)*/ acct_id,
                         customer,
                         sa_type_cd,
                         revn_cls,
                         rate,
                         tariff,
                         accounting_date,
                         SUM(bdgt_amt) bdgt_amt,
                         CASE
                           WHEN Trim(revn_cls) = 'COMPANY' THEN SUM(cu_amt)
                           ELSE SUM(actual_amt)
                         END           actual_amt,
                         SUM(revn_amt) revn_amt,
                         SUM(bill_kwh) bill_kwh,
                         Max(bill_kw)  bill_kw
FROM   (SELECT sa.acct_id,
               ft.ft_id,
               (SELECT entity_name
                FROM   cisadm.ci_per_name
                WHERE  prim_name_sw = 'Y'
                       AND per_id IN (SELECT per_id
                                      FROM   cisadm.ci_acct_per
                                      WHERE  main_cust_sw = 'Y'
                                             AND acct_id = sa.acct_id)) customer
               ,
               sa.sa_type_cd,
               (SELECT rev_cl_cd
                FROM   cisadm.ci_sa_type
                WHERE  sa_type_cd = sa.sa_type_cd)                      revn_cls
               ,
               ss.rs_cd
               rate,
               ss.tariff,
               Trunc(ft.accounting_dt, 'MM')
               accounting_date
                      ,
               cur_amt
                      bdgt_amt,
               tot_amt
               actual_amt,
               Nvl((SELECT SUM(-calc_amt)
                    FROM   cisadm.ci_bseg_calc_ln bc
                           join cisadm.ci_bseg bs
                             ON ( bc.bseg_id = bs.bseg_id )
                    WHERE  bs.bill_id = ft.parent_id
                           AND Trim(bc.dst_id) = 'EX-MISCGL'), 0)       cu_amt,
               Nvl((SELECT SUM(-amount)
                    FROM   cisadm.ci_ft_gl
                    WHERE  dst_id LIKE 'RV%'
                           AND ft_id = ft.ft_id), 0)                    revn_amt
               ,
               CASE
                 WHEN ft_type_flg = 'BX' THEN -1
                 ELSE 1
               END * (SELECT SUM(bill_sq)
                      FROM   cisadm.ci_bseg_sq
                      WHERE  uom_cd NOT IN ( 'MTRR', 'KW', 'KVRH', 'PWRF',
                                             'HPS', 'KWHE', 'KWHQ', 'KWHH',
                                             '    ' )
                             AND bseg_id = ft.sibling_id)               bill_kwh
               ,
               CASE
                 WHEN ft_type_flg = 'BX' THEN -1
                 ELSE 1
               END * (SELECT Max(bill_sq)
                      FROM   cisadm.ci_bseg_sq
                      WHERE  sqi_cd = 'BILLKW'
                             AND bseg_id = ft.sibling_id)               bill_kw
        FROM   cisadm.ci_ft ft
               join cisadm.ci_sa sa
                 ON ( ft.sa_id = sa.sa_id )
               join sas ss
                 ON ( ft.sa_id = ss.sa_id )
               join dtrng dt
                 ON ( To_char(accounting_dt, 'YYYYMM') = dt.mnth )
        WHERE  ft_type_flg LIKE 'B%'
               AND freeze_dttm IS NOT NULL
               AND ( To_char(rheffdt, 'YYYYMM') &amp;lt;= dt.mnth )
               AND ( To_char(rceffdt, 'YYYYMM') &amp;lt;= dt.mnth ))
GROUP  BY acct_id,
          customer,
          sa_type_cd,
          revn_cls,
          rate,
          tariff,
          accounting_date 
/
&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;h2&gt; 2nd version - optimized CTE&lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h2&gt;&lt;pre&gt;
 WITH dtrng
     AS (SELECT /* test no temp table */ mnth
         FROM   (SELECT DISTINCT To_char(dt, 'YYYYMM') mnth
                 FROM   (SELECT LEVEL   n,
                                Add_months(Trunc(SYSDATE, 'YEAR')-1, -12)
                                + LEVEL AS dt
                         FROM   dual
                         CONNECT BY LEVEL &amp;lt;= ( Add_months(Trunc(SYSDATE, 'MM'),
                                               -1) -
                                               Add_months(Trunc(SYSDATE,
                                                          'YEAR'), -13)
                                                         ))x
                 ORDER  BY 1)),
     rc_char
     AS (SELECT RS.rs_cd,
                CH.char_val,
                Trim(CH.char_type_cd) char_type_cd,
                effdt
         FROM   cisadm.ci_rs RS
                left join (SELECT rs_cd,
                                  calc_grp_cd,
                                  effdt
                           FROM   cisadm.c1_rs_rv2) RV
                       ON RV.rs_cd = RS.rs_cd
                left join cisadm.c1_calc_rule_char CH
                       ON CH.calc_grp_cd = RV.calc_grp_cd
         WHERE  Trim(CH.char_type_cd) = 'RATEALPH'),
     sas
     AS (SELECT
        /*+parallel(12)*/ x.*
         FROM   (SELECT rh.sa_id,
                        rh.rs_cd,
                        rc.char_val                 tariff,
                        rh.effdt                    rheffdt,
                        rc.effdt                    rceffdt,
                        Rank()
                          over (
                            PARTITION BY rh.sa_id
                            ORDER BY rh.effdt DESC) rnk
                 FROM   cisadm.ci_sa_rs_hist rh
                        join rc_char rc
                          ON ( rh.rs_cd = rc.rs_cd )
                 WHERE  rc.char_type_cd = 'RATEALPH')x
         WHERE  rnk = 1),
cisa_cte_tmp as
 (SELECT /*+parallel(12)*/ t1.sa_id,
 sa.acct_id,
               t1.customer,
               sa.sa_type_cd,
                              (SELECT rev_cl_cd
                FROM   cisadm.ci_sa_type
                WHERE  sa_type_cd = sa.sa_type_cd)                      revn_cls
        FROM   cisadm.ci_sa sa
        left join
              (
SELECT /*+ parallel(8) */ sa.sa_id, a.entity_name customer
                              FROM   cisadm.ci_per_name a, cisadm.ci_acct_per b, cisadm.ci_sa sa
                              WHERE  a.per_id = b.per_id
                              and b.acct_id = sa.acct_id
                              and a.prim_name_sw = 'Y'
                              and b.main_cust_sw = 'Y'
                              ) t1
                                                          on t1.sa_id = sa.sa_id) 
SELECT /* main query */ /*+parallel(12)*/ acct_id,
                         customer,
                         sa_type_cd,
                         revn_cls,
                         rate,
                         tariff,
                         accounting_date,
                         SUM(bdgt_amt) bdgt_amt,
                         CASE
                           WHEN Trim(revn_cls) = 'COMPANY' THEN SUM(cu_amt)
                           ELSE SUM(actual_amt)
                         END           actual_amt,
                         SUM(revn_amt) revn_amt,
                         SUM(bill_kwh) bill_kwh,
                         Max(bill_kw)  bill_kw
FROM   (
        SELECT sa.acct_id,
               ft.ft_id,
               sa.customer,
               sa.sa_type_cd,
               sa.revn_cls,
               ss.rs_cd rate,
               ss.tariff,
               Trunc(ft.accounting_dt, 'MM') accounting_date,
               cur_amt bdgt_amt,
               tot_amt actual_amt,
               Nvl((SELECT SUM(-calc_amt)
                    FROM   cisadm.ci_bseg_calc_ln bc
                           join cisadm.ci_bseg bs
                             ON ( bc.bseg_id = bs.bseg_id )
                    WHERE  bs.bill_id = ft.parent_id
                           AND Trim(bc.dst_id) = 'EX-MISCGL'), 0)       cu_amt,
               Nvl((SELECT SUM(-amount)
                    FROM   cisadm.ci_ft_gl
                    WHERE  dst_id LIKE 'RV%'
                           AND ft_id = ft.ft_id), 0)                    revn_amt,
               CASE
                 WHEN ft_type_flg = 'BX' THEN -1
                 ELSE 1
               END * (SELECT SUM(bill_sq)
                      FROM   cisadm.ci_bseg_sq sq
                      WHERE  ( sq.uom_cd NOT IN ( 'MTRR', 'KW', 'KVARH', 'PWRF',
                                                  'HPS', 'KWHE', 'KWHQ', 'KWHH',
                                                  ' ' )
                               -- KWH Usage  / CORRECTED RCB 05/2020
                               AND sq.tou_cd = ' ' )
                             AND bseg_id = ft.sibling_id)               bill_kwh
               ,
               CASE
                 WHEN ft_type_flg = 'BX' THEN -1
                 ELSE 1
               END * (SELECT Max(bill_sq)
                      FROM   cisadm.ci_bseg_sq
                      WHERE  sqi_cd = 'BILLKW'
                             AND bseg_id = ft.sibling_id)               bill_kw
        FROM   cisadm.ci_ft ft
               join cisadm.cisa_cte_tmp sa
                 ON ( ft.sa_id = sa.sa_id )
               join sas ss
                 ON ( ft.sa_id = ss.sa_id )
               join dtrng dt
                 ON ( To_char(accounting_dt, 'YYYYMM') = dt.mnth )
        WHERE  ft_type_flg LIKE 'B%'
               AND ft.accounting_dt &amp;gt;= To_date('01-AUG-20', 'DD-MON-YY')
               /* Added for PREPROD */
               AND ft.accounting_dt &amp;lt;= To_date('31-AUG-20', 'DD-MON-YY')
               /* Added for PREPROD */
               AND freeze_dttm IS NOT NULL
               AND ( To_char(rheffdt, 'YYYYMM') &amp;lt;= dt.mnth )
               AND ( To_char(rceffdt, 'YYYYMM') &amp;lt;= dt.mnth )
  )
GROUP  BY acct_id,
          customer,
          sa_type_cd,
          revn_cls,
          rate,
          tariff,
          accounting_date;

/*
Elapsed: 00:01:50.49

      Difference Statistics Name
---------------- --------------------------------------------------------------
              15 active txn count during cleanout
       1,737,168 Batched IO block miss count
         435,779 Batched IO (bound) vector count
             342 Batched IO buffer defrag count
          68,376 Batched IO double miss count
           1,809 Batched IO (full) vector count
         935,885 Batched IO same unit count
         472,306 Batched IO single block count
           1,526 Batched IO slow jump count
         303,600 Batched IO vector block count
          31,636 Batched IO vector read count
      21,305,812 buffer is not pinned count
     144,721,486 buffer is pinned count
          13,017 bytes received via SQL*Net from client
           3,156 bytes sent via SQL*Net to client
          30,025 Cached Commit SCN referenced
           1,166 calls to get snapshot scn: kcmgss
              99 calls to kcmgas
          24,509 calls to kcmgcs
              84 CCursor + sql area evicted
         196,687 cell blocks helped by minscn optimization
         239,807 cell blocks processed by cache layer
         237,607 cell blocks processed by data layer
         239,807 cell blocks processed by txn layer
       2,423,216 cell flash cache read hits
   1,946,476,544 cell IO uncompressed bytes
         137,053 cell logical write IO requests
             864 cell num smartio automem buffer allocation attempts
              10 cell num smartio transient cell failures
         229,978 cell overwrites in flash cache
  52,942,118,912 cell physical IO bytes eligible for predicate offload
  52,942,118,912 cell physical IO bytes eligible for smart IOs
  50,996,019,200 cell physical IO bytes saved by storage index
 122,626,859,464 cell physical IO interconnect bytes
     117,514,696 cell physical IO interconnect bytes returned by smart scan
             864 cell scans
             852 cell smart IO session cache hits
             852 cell smart IO session cache lookups
             852 cell smart IO session cache soft misses
         273,972 cell writes to flash cache
               5 change write time
             105 cleanout - number of ktugct calls
              93 cleanouts only - consistent read gets
             366 cluster key scan block gets
              92 cluster key scans
             113 cluster wait time
              79 commit batch/immediate performed
              79 commit batch/immediate requested
               6 commit cleanout failures: block lost
               2 commit cleanout failures: callback failure
              45 commit cleanouts
              37 commit cleanouts successfully completed
              79 commit immediate performed
              79 commit immediate requested
              93 Commit SCN cached
              93 commit txn count during cleanout
          13,713 concurrency wait time
           1,258 consistent changes
      52,938,886 consistent gets
       6,462,661 consistent gets direct
      21,750,528 consistent gets examination
      21,711,058 consistent gets examination (fastpath)
      46,476,225 consistent gets from cache
      24,725,697 consistent gets pin
      21,899,692 consistent gets pin (fastpath)
          59,625 CPU used by this session
           5,640 CPU used when call started
           3,897 db block changes
          10,973 db block gets
           8,410 db block gets direct
           2,563 db block gets from cache
             354 db block gets from cache (fastpath)
         193,625 DB time
              12 deferred (CURRENT) block cleanout applications
               4 DFO trees parallelized
             196 dirty buffers inspected
              65 enqueue conversions
          34,597 enqueue releases
          34,663 enqueue requests
              11 enqueue timeouts
              18 enqueue waits
             309 execute count
       1,128,777 fastpath consistent get quota limit
  61,591,109,414 file io wait time
       2,594,822 free buffer inspected
       2,296,443 free buffer requested
               7 gc cr blocks received
              54 gc current blocks received
       2,164,338 gc local grants
         132,054 gc remote grants
             423 gcs affinity lock failures
         132,189 gcs messages sent
               1 gcs read-mostly lock failures
         635,721 gcs read-mostly lock grants
              26 ges messages sent
              32 global enqueue get time
          36,687 global enqueue gets sync
          36,586 global enqueue releases
               2 Heap Segment Array Updates
       1,403,459 hot buffers moved to head of LRU
           1,218 HSC Heap Segment Block Changes
              93 immediate (CR) block cleanout applications
              16 immediate (CURRENT) block cleanout applications
          72,976 in call idle wait time
               4 index fast full scans (full)
             159 index fast full scans (rowid ranges)
       3,465,146 index fetch by key
       7,715,969 index scans kdiixs1
              80 KTFB alloc req
      75,497,472 KTFB alloc space (block)
           1,993 KTFB alloc time (ms)
 380,754,231,296 logical read bytes from cache
             203 messages sent
          88,571 min active SCN optimization applied on CR
         125,759 no buffer to keep pinned count
      24,699,824 no work - consistent read gets
      11,488,635 non-idle wait count
          69,644 non-idle wait time
             308 opened cursors cumulative
               4 Parallel operations not downgraded
               6 parse count (hard)
             160 parse count (total)
           1,251 parse time cpu
          14,900 parse time elapsed
 105,944,801,280 physical read bytes
       2,472,946 physical read IO requests
       2,472,960 physical read requests optimized
 105,945,030,656 physical read total bytes
 105,945,030,656 physical read total bytes optimized
       2,472,960 physical read total IO requests
         186,145 physical read total multi block requests
      12,932,715 physical reads
       2,296,214 physical reads cache
         271,099 physical reads cache prefetch
      10,636,501 physical reads direct
       4,173,840 physical reads direct temporary tablespace
  34,753,216,512 physical write bytes
         137,053 physical write IO requests
         136,986 physical write requests optimized
  34,753,216,512 physical write total bytes
  34,684,321,792 physical write total bytes optimized
         137,053 physical write total IO requests
         136,585 physical write total multi block requests
       4,242,336 physical writes
       4,242,336 physical writes direct
       4,233,926 physical writes direct temporary tablespace
       4,242,336 physical writes non checkpoint
              43 pinned buffers inspected
               6 prefetched blocks aged out before use
       2,230,749 PX local messages recv'd
       2,230,749 PX local messages sent
              12 PX remote messages recv'd
              12 PX remote messages sent
               4 queries parallelized
          35,208 recursive calls
          54,478 recursive cpu usage
          10,576 redo entries
      69,611,152 redo size
      69,270,612 redo size for direct writes
             107 redo subscn max counts
               1 redo synch writes
              16 Requests to/from client
         608,188 rows fetched via callback
              56 session cursor cache count
             162 session cursor cache hits
      52,949,859 session logical reads
       3,080,192 session pga memory
     192,741,376 session pga memory max
       1,833,600 session uga memory
     177,646,336 session uga memory max
         790,834 shared hash latch upgrades - no wait
               2 shared hash latch upgrades - wait
             162 sorts (memory)
       7,913,932 sorts (rows)
             110 sql area evicted
              16 SQL*Net roundtrips to/from client
               2 switch current to new buffer
      78,830,039 table fetch by rowid
               1 table fetch continued row
         110,357 table scan blocks gotten
      13,524,901 table scan disk non-IMC rows gotten
      13,813,969 table scan rows gotten
             864 table scans (direct read)
           2,959 table scans (long tables)
             366 table scans (rowid ranges)
           1,746 table scans (short tables)
       2,097,152 temp space allocated (bytes)
         110,832 undo change vector size
             143 user calls
               2 user commits
          55,172 user I/O wait time
              12 workarea executions - onepass
             371 workarea executions - optimal

system@ouhubprd&amp;gt; select count(1) from t3;

 COUNT(1)
---------
   589881

1 row selected.
*/
&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;h2&gt; 3rd version - onion approach &lt;div style=&quot;font-size: 0.5em; color: blue;&quot;&gt;&lt;a class=&quot;dcTOCTop&quot; title=&quot;Go to top of tiddler&quot; href=&quot;javascript:;&quot;&gt; [top]&lt;/a&gt;&lt;/div&gt;&lt;/h2&gt;&lt;pre&gt;
WITH 
dtrng AS (
	SELECT /* test rate class */ mnth
	FROM (
		SELECT DISTINCT To_char(dt, 'YYYYMM') mnth 
		FROM (
			SELECT LEVEL n, Add_months(Trunc(SYSDATE, 'YEAR')-1, -12) + LEVEL AS dt 
			FROM   dual 
			CONNECT BY LEVEL &amp;lt;= ( Add_months(Trunc(SYSDATE, 'MM'), -1) - Add_months(Trunc(SYSDATE, 'YEAR'), -13))
			) x 
		ORDER  BY 1
	)
), 
rc_char AS (
	SELECT RS.rs_cd, 
		CH.char_val, 
		Trim(CH.char_type_cd) char_type_cd, 
		effdt 
	FROM   cisadm.ci_rs RS 
	left join (
		SELECT rs_cd, 
			calc_grp_cd, 
			effdt 
		FROM cisadm.c1_rs_rv2
		) RV
		ON RV.rs_cd = RS.rs_cd 
	left join cisadm.c1_calc_rule_char CH ON CH.calc_grp_cd = RV.calc_grp_cd 
	 WHERE  Trim(CH.char_type_cd) = 'RATEALPH'
), 
sas AS (
	SELECT 
		/*+parallel(12)*/ x.* 
		FROM (
			SELECT rh.sa_id, 
				rh.rs_cd, 
				rc.char_val                 tariff, 
				rh.effdt                    rheffdt, 
				rc.effdt                    rceffdt, 
				Rank() over ( PARTITION BY rh.sa_id ORDER BY rh.effdt DESC) rnk 
			FROM   cisadm.ci_sa_rs_hist rh 
			join rc_char rc ON ( rh.rs_cd = rc.rs_cd ) 
			WHERE  rc.char_type_cd = 'RATEALPH'
			) x 
		WHERE rnk = 1
),
a1 as (
	SELECT
		ss.rs_cd rate, ss.tariff, Trunc(ft.accounting_dt, 'MM') accounting_date, cur_amt bdgt_amt, tot_amt actual_amt, 
		sa.acct_id, sa.sa_type_cd, 
		ft.ft_id, ft.parent_id, ft.ft_type_flg, ft.sibling_id
	FROM cisadm.ci_ft ft 
	join cisadm.ci_sa sa ON ( ft.sa_id = sa.sa_id )
	join sas ss ON ( ft.sa_id = ss.sa_id ) 
	join dtrng dt ON ( To_char(accounting_dt, 'YYYYMM') = dt.mnth ) 
	where ft_type_flg LIKE 'B%' 
		AND ft.accounting_dt &amp;gt;= To_date('01-AUG-20', 'DD-MON-YY') 
		/* Added for PREPROD */ 
		AND ft.accounting_dt &amp;lt;= To_date('31-AUG-20', 'DD-MON-YY') 
		/* Added for PREPROD */ 
		AND freeze_dttm IS NOT NULL
		AND ( To_char(rheffdt, 'YYYYMM') &amp;lt;= dt.mnth ) 
		AND ( To_char(rceffdt, 'YYYYMM') &amp;lt;= dt.mnth ) 
),
a2 as (
	select 
		a1.rate, a1.tariff, a1.accounting_date, a1.bdgt_amt, a1.actual_amt, 
		a1.acct_id, a1.sa_type_cd, a1.ft_id, a1.parent_id, a1.ft_type_flg, a1.sibling_id, 
		max(CASE WHEN ft_type_flg = 'BX' THEN -1 ELSE 1 END * sq.bill_sq) bill_kw
	from a1
	left join cisadm.ci_bseg_sq sq ON (sq.bseg_id = a1.sibling_id and sq.sqi_cd = 'BILLKW' )
	group by a1.rate, a1.tariff, a1.accounting_date, a1.bdgt_amt, a1.actual_amt, 
		a1.acct_id, a1.sa_type_cd, a1.ft_id, a1.parent_id, a1.ft_type_flg, a1.sibling_id
),
a3 as (
	select a2.rate, a2.tariff, a2.accounting_date, a2.bdgt_amt, a2.actual_amt, 
		a2.acct_id, a2.sa_type_cd, a2.ft_id, a2.parent_id, a2.ft_type_flg, a2.sibling_id, a2.bill_kw,
		CASE WHEN ft_type_flg = 'BX' THEN -1 ELSE 1 END * sum(sq2.bill_sq) bill_kwh
	from a2
	left join cisadm.ci_bseg_sq sq2 ON (sq2.bseg_id = a2.sibling_id and sq2.uom_cd NOT IN ( 'MTRR', 'KW', 'KVARH', 'PWRF', 'HPS', 'KWHE', 'KWHQ', 'KWHH', ' ' ) and sq2.tou_cd = ' ' )
	group by a2.rate, a2.tariff, a2.accounting_date, a2.bdgt_amt, a2.actual_amt, 
		a2.acct_id, a2.sa_type_cd, a2.ft_id, a2.parent_id, a2.ft_type_flg, a2.sibling_id, a2.bill_kw
),
a4 as (
	select a3.rate, a3.tariff, a3.accounting_date, a3.bdgt_amt, a3.actual_amt, 
		a3.acct_id, a3.sa_type_cd, a3.ft_id, a3.parent_id, a3.ft_type_flg, a3.sibling_id, a3.bill_kw, a3.bill_kwh, 
		max(pn.entity_name) customer
	from a3
	left join cisadm.ci_acct_per ap ON (ap.main_cust_sw = 'Y' AND ap.acct_id = a3.acct_id)
	left join cisadm.ci_per_name pn ON (pn.prim_name_sw = 'Y' AND pn.per_id = ap.per_id)
	group by a3.rate, a3.tariff, a3.accounting_date, a3.bdgt_amt, a3.actual_amt, 
		a3.acct_id, a3.sa_type_cd, a3.ft_id, a3.parent_id, a3.ft_type_flg, a3.sibling_id, a3.bill_kw, a3.bill_kwh
),
a5 as (
	select a4.rate, a4.tariff, a4.accounting_date, a4.bdgt_amt, a4.actual_amt, 
		a4.acct_id, a4.sa_type_cd, a4.ft_id, a4.parent_id, a4.ft_type_flg, a4.sibling_id, a4.bill_kw, a4.bill_kwh, a4.customer,
	max(st.rev_cl_cd) revn_cls
	from a4
	left join cisadm.ci_sa_type st ON (st.sa_type_cd = a4.sa_type_cd)
	group by a4.rate, a4.tariff, a4.accounting_date, a4.bdgt_amt, a4.actual_amt, 
		a4.acct_id, a4.sa_type_cd, a4.ft_id, a4.parent_id, a4.ft_type_flg, a4.sibling_id, a4.bill_kw, a4.bill_kwh, a4.customer
),
a6 as (
	select a5.rate, a5.tariff, a5.accounting_date, a5.bdgt_amt, a5.actual_amt, 
		a5.acct_id, a5.sa_type_cd, a5.ft_id, a5.parent_id, a5.ft_type_flg, a5.sibling_id, a5.bill_kw, a5.bill_kwh, a5.customer, a5.revn_cls,
		nvl(sum(-fg.amount),0) revn_amt
	from a5
	left join cisadm.ci_ft_gl fg ON (fg.dst_id LIKE 'RV%' AND fg.ft_id = a5.ft_id)
	group by a5.rate, a5.tariff, a5.accounting_date, a5.bdgt_amt, a5.actual_amt, 
		a5.acct_id, a5.sa_type_cd, a5.ft_id, a5.parent_id, a5.ft_type_flg, a5.sibling_id, a5.bill_kw, a5.bill_kwh, a5.customer, a5.revn_cls
),
a7 as (
	select a6.rate, a6.tariff, a6.accounting_date, a6.bdgt_amt, a6.actual_amt, 
		a6.acct_id, a6.sa_type_cd, a6.ft_id, a6.parent_id, a6.ft_type_flg, a6.sibling_id, a6.bill_kw, a6.bill_kwh, a6.customer, a6.revn_cls, a6.revn_amt,
		nvl(sum(-bc.calc_amt),0) cu_amt
	from a6
	left join cisadm.ci_bseg bs ON ( bs.bill_id = a6.parent_id )
	left join cisadm.ci_bseg_calc_ln bc ON (trim(bc.dst_id) = 'EX-MISCGL' AND bc.bseg_id = bs.bseg_id)
	group by a6.rate, a6.tariff, a6.accounting_date, a6.bdgt_amt, a6.actual_amt, 
		a6.acct_id, a6.sa_type_cd, a6.ft_id, a6.parent_id, a6.ft_type_flg, a6.sibling_id, a6.bill_kw, a6.bill_kwh, a6.customer, a6.revn_cls, a6.revn_amt
)
SELECT /*+parallel(12)*/ 
	acct_id, 
	customer, 
	sa_type_cd, 
	revn_cls, 
	rate, 
	tariff, 
	accounting_date, 
	SUM(bdgt_amt) bdgt_amt, 
	CASE WHEN Trim(revn_cls) = 'COMPANY' THEN SUM(cu_amt) ELSE SUM(actual_amt) END actual_amt, 
	SUM(revn_amt) revn_amt, 
	SUM(bill_kwh) bill_kwh, 
	Max(bill_kw)  bill_kw 
FROM a7
GROUP  BY acct_id, 
          customer, 
          sa_type_cd, 
          revn_cls, 
          rate, 
          tariff, 
          accounting_date 
/

/*
Elapsed: 00:01:03.48

      Difference Statistics Name
---------------- --------------------------------------------------------------
               6 active txn count during cleanout
       1,271,660 Batched IO block miss count
         359,302 Batched IO (bound) vector count
              14 Batched IO buffer defrag count
          70,097 Batched IO double miss count
         763,930 Batched IO same unit count
         395,067 Batched IO single block count
          72,622 Batched IO vector block count
          34,102 Batched IO vector read count
      28,534,825 buffer is not pinned count
     162,191,316 buffer is pinned count
          12,361 bytes received via SQL*Net from client
           3,535 bytes sent via SQL*Net to client
          16,179 Cached Commit SCN referenced
           1,909 calls to get snapshot scn: kcmgss
             107 calls to kcmgas
          47,437 calls to kcmgcs
              56 CCursor + sql area evicted
         197,785 cell blocks helped by minscn optimization
         240,904 cell blocks processed by cache layer
         238,168 cell blocks processed by data layer
         240,904 cell blocks processed by txn layer
       1,752,886 cell flash cache read hits
   1,951,072,256 cell IO uncompressed bytes
           1,187 cell logical write IO requests
             864 cell num smartio automem buffer allocation attempts
              12 cell num smartio transient cell failures
           1,906 cell overwrites in flash cache
  52,942,118,912 cell physical IO bytes eligible for predicate offload
  52,942,118,912 cell physical IO bytes eligible for smart IOs
  50,991,439,872 cell physical IO bytes saved by storage index
  15,198,069,312 cell physical IO interconnect bytes
     117,514,816 cell physical IO interconnect bytes returned by smart scan
             864 cell scans
             852 cell smart IO session cache hits
             852 cell smart IO session cache lookups
             852 cell smart IO session cache soft misses
           2,240 cell writes to flash cache
               3 change write time
              70 cleanout - number of ktugct calls
              66 cleanouts only - consistent read gets
             522 cluster key scan block gets
             214 cluster key scans
              80 cluster wait time
              79 commit batch/immediate performed
              79 commit batch/immediate requested
               6 commit cleanout failures: block lost
               2 commit cleanout failures: callback failure
              61 commit cleanouts
              53 commit cleanouts successfully completed
              79 commit immediate performed
              79 commit immediate requested
              66 Commit SCN cached
              67 commit txn count during cleanout
           9,219 concurrency wait time
           1,258 consistent changes
      57,260,214 consistent gets
       6,462,661 consistent gets direct
      19,405,844 consistent gets examination
      19,249,529 consistent gets examination (fastpath)
      50,797,553 consistent gets from cache
      31,391,709 consistent gets pin
      29,821,428 consistent gets pin (fastpath)
          32,714 CPU used by this session
             443 CPU used when call started
           3,906 db block changes
          10,987 db block gets
           8,410 db block gets direct
           2,577 db block gets from cache
             358 db block gets from cache (fastpath)
         146,256 DB time
              28 deferred (CURRENT) block cleanout applications
               4 DFO trees parallelized
             167 dirty buffers inspected
              66 enqueue conversions
             769 enqueue releases
             870 enqueue requests
              22 enqueue timeouts
              21 enqueue waits
             914 execute count
     375,723,722 file io wait time
       1,902,404 free buffer inspected
       1,767,840 free buffer requested
               1 gc cr blocks received
              12 gc current block receive time
           1,029 gc current blocks received
       1,759,369 gc local grants
           7,480 gc remote grants
             544 gcs affinity lock failures
           8,510 gcs messages sent
               1 gcs read-mostly lock failures
         538,609 gcs read-mostly lock grants
              15 ges messages sent
               1 global enqueue get time
           3,392 global enqueue gets sync
           3,291 global enqueue releases
               1 heap block compress
               2 Heap Segment Array Updates
         880,631 hot buffers moved to head of LRU
           1,213 HSC Heap Segment Block Changes
              66 immediate (CR) block cleanout applications
               9 immediate (CURRENT) block cleanout applications
          72,676 in call idle wait time
           1,266 index fast full scans (full)
       3,827,633 index fetch by key
       6,220,919 index scans kdiixs1
              80 KTFB alloc req
      69,206,016 KTFB alloc space (block)
           2,127 KTFB alloc time (ms)
 416,154,664,960 logical read bytes from cache
             211 messages sent
          65,121 min active SCN optimization applied on CR
          10,257 no buffer to keep pinned count
      31,342,106 no work - consistent read gets
       4,166,666 non-idle wait count
          47,004 non-idle wait time
           1,051 opened cursors cumulative
               4 Parallel operations not downgraded
              12 parse count (failures)
              18 parse count (hard)
             448 parse count (total)
             855 parse time cpu
          10,095 parse time elapsed
  67,415,498,752 physical read bytes
       1,802,611 physical read IO requests
       1,802,625 physical read requests optimized
  67,415,728,128 physical read total bytes
  67,415,728,128 physical read total bytes optimized
       1,802,625 physical read total IO requests
          51,514 physical read total multi block requests
       8,229,431 physical reads
       1,766,770 physical reads cache
          42,632 physical reads cache prefetch
       6,462,661 physical reads direct
     303,472,640 physical write bytes
           1,187 physical write IO requests
           1,120 physical write requests optimized
     303,472,640 physical write total bytes
     234,700,800 physical write total bytes optimized
           1,187 physical write total IO requests
             962 physical write total multi block requests
          37,045 physical writes
          37,045 physical writes direct
          28,635 physical writes direct temporary tablespace
          37,045 physical writes non checkpoint
              17 pinned buffers inspected
           1,720 prefetched blocks aged out before use
         406,318 PX local messages recv'd
         406,318 PX local messages sent
              12 PX remote messages recv'd
              12 PX remote messages sent
               4 queries parallelized
           2,515 recursive calls
          32,574 recursive cpu usage
          10,567 redo entries
      69,612,644 redo size
      69,270,656 redo size for direct writes
              69 redo subscn max counts
               1 redo synch writes
              16 Requests to/from client
         608,392 rows fetched via callback
              81 session cursor cache count
             689 session cursor cache hits
      57,271,201 session logical reads
       2,883,584 session pga memory
     109,707,264 session pga memory max
       2,746,992 session uga memory
     105,709,736 session uga memory max
         843,754 shared hash latch upgrades - no wait
              68 shared hash latch upgrades - wait
              78 sorts (memory)
       7,265,269 sorts (rows)
              56 sql area evicted
              12 sql area purged
              16 SQL*Net roundtrips to/from client
               2 switch current to new buffer
      91,938,642 table fetch by rowid
               2 table fetch continued row
         101,686 table scan blocks gotten
      10,064,796 table scan disk non-IMC rows gotten
      11,099,748 table scan rows gotten
             864 table scans (direct read)
          10,208 table scans (long tables)
             370 table scans (rowid ranges)
              89 table scans (short tables)
       2,097,152 temp space allocated (bytes)
         112,856 undo change vector size
             143 user calls
               2 user commits
          37,610 user I/O wait time
             523 workarea executions - optimal

system@ouhubprd&amp;gt; select count(1) from t2;

 COUNT(1)
---------
   589881

1 row selected.
*/
&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</description>
<category>..my rewrite examples</category>
<link>http://karlarao.tiddlyspot.com#%5B%5BVST%20optimized%20CTE%20and%20onion%20approach%20same%20query%20logic%5D%5D</link>
<pubDate>Tue, 06 Apr 2021 05:57:00 GMT</pubDate>

</item>
<item>
<title>normalized to unpivot, multiple left join rewrite</title>
<description>&lt;ul&gt;&lt;li&gt; if you UNPIVOT or denormalize you only join once on the table.generatedjobid and not join for every &quot;type&quot; or &quot;parametertype&quot;. you can also take advantage of parallelism and partition pruning on &quot;dateacquired&quot;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;pre&gt;
# original 
```
SELECT TOP (100) j.[generatedjobid],
       j.[jobid],
       j.[city],
       j.state,
       j.zipcode,
       j.country,
       j.[createddate],
       j.[dateacquired],
       j.[description],
       j.[expired],
       j.[expirydate],
       j.[fedcontractor],
       j.[lastupdateddate],
       j.[sourcestate],
       j.[title],
       j.[filename],
       onet.value           AS onet_code,
       naics.value          AS naics_code,
       mined.value          AS min_education,
       expr.value           AS experience,
       lic.value            AS license,
       train.value          AS training,
       positions.maximum    AS maxPositions,
       duration.maximum     AS jobDuration,
       hoursperweek.maximum AS weeklyHours,
       shift.maximum        AS shift,
       salary.minimum       AS minSalary,
       salary.maximum       AS maxSalary,
       salary.unit          AS salaryUnit,
       addr.city            AS companyCity,
       addr.state           AS companyState,
       addr.zipcode         AS companyZipcode,
       addr.country         AS companyCountry
FROM   [conduent].[dbo].[job] j
       LEFT JOIN classification onet
              ON ( j.generatedjobid = onet.generatedjobid
                   AND onet.type = 'ONET' )
       LEFT JOIN classification naics
              ON ( j.generatedjobid = naics.generatedjobid
                   AND naics.type = 'NAICS' )
       LEFT JOIN requirement mined
              ON ( j.generatedjobid = mined.generatedjobid
                   AND mined.type = 'mineducation' )
       LEFT JOIN requirement expr
              ON ( j.generatedjobid = expr.generatedjobid
                   AND expr.type = 'experience' )
       LEFT JOIN requirement lic
              ON ( j.generatedjobid = lic.generatedjobid
                   AND lic.type = 'license' )
       LEFT JOIN requirement train
              ON ( j.generatedjobid = train.generatedjobid
                   AND train.type = 'training' )
       LEFT JOIN parameter positions
              ON ( j.generatedjobid = positions.generatedjobid
                   AND parametertype = 'positions' )
       LEFT JOIN parameter duration
              ON ( j.generatedjobid = duration.generatedjobid
                   AND duration.parametertype = 'duration' )
       LEFT JOIN parameter hoursperweek
              ON ( j.generatedjobid = hoursperweek.generatedjobid
                   AND hoursperweek.parametertype = 'hoursperweek' )
       LEFT JOIN parameter shift
              ON ( j.generatedjobid = shift.generatedjobid
                   AND shift.parametertype = 'shift' )
       LEFT JOIN parameter salary
              ON ( j.generatedjobid = salary.generatedjobid
                   AND salary.parametertype = 'salary' )
       LEFT JOIN [application] a
              ON ( j.generatedjobid = a.generatedjobid )
       LEFT JOIN [address] addr
              ON ( a.applicationid = addr.applicationid )
WHERE  [dateacquired] BETWEEN CONVERT(DATETIME, '2017-01-01') AND
                              CONVERT(DATETIME, '2018-12-31 23:59:59') 



TableName                RowCount
[dbo].[Address]    1,099,494
[dbo].[Application]    38,549,607
[dbo].[Classification]    77,099,214
[dbo].[DailySummary]    574
[dbo].[Job]                36,503,982
[dbo].[JobUploadLog]    86,366
[dbo].[Method]                1,724,666
[dbo].[Parameter]    37,235,995
[dbo].[Requirement]    29,788,796

```


# rewrite
```

 WITH cte_classification as (
     select * from 
     classification 
     unpivot (value for type in ('ONET','NAICS') )
     where  [dateacquired] BETWEEN CONVERT(DATETIME, '2017-01-01') AND
                              CONVERT(DATETIME, '2018-12-31 23:59:59')  
 ),
 cte_requirement as (
     select * from 
     requirement 
     unpivot (value for type in ('mineducation','experience','license','training' ) )
     where  [dateacquired] BETWEEN CONVERT(DATETIME, '2017-01-01') AND
                              CONVERT(DATETIME, '2018-12-31 23:59:59')   
 ),
 cte_parameter as (
     select * from 
     parameter 
     unpivot (('minimum','maximum','unit')) for parametertype in ('positions' , 'duration', 'hoursperweek', 'shift' , 'salary') )
     where  [dateacquired] BETWEEN CONVERT(DATETIME, '2017-01-01') AND
                              CONVERT(DATETIME, '2018-12-31 23:59:59')  
 )
 SELECT TOP (100) j.[generatedjobid],
                 j.[jobid],
                 j.[city],
                 j.state,
                 j.zipcode,
                 j.country,
                 j.[createddate],
                 j.[dateacquired],
                 j.[description],
                 j.[expired],
                 j.[expirydate],
                 j.[fedcontractor],
                 j.[lastupdateddate],
                 j.[sourcestate],
                 j.[title],
                 j.[filename],
                 cte_class.onet         AS onet_code,
                 cte_class.naics        AS naics_code,
                 cte_req.mined          AS min_education,
                 cte_req.expr           AS experience,
                 cte_req.lic            AS license,
                 cte_req.train          AS training,
                 cte_param.positions.maximum    AS maxPositions,
                 cte_param.duration.maximum     AS jobDuration,
                 cte_param.hoursperweek.maximum AS weeklyHours,
                 cte_param.shift.maximum        AS shift,
                 cte_param.salary.minimum       AS minSalary,
                 cte_param.salary.maximum       AS maxSalary,
                 cte_param.salary.unit          AS salaryUnit,
                 addr.city            AS companyCity,
                 addr.state           AS companyState,
                 addr.zipcode         AS companyZipcode,
                 addr.country         AS companyCountry
FROM   [conduent].[dbo].[job] j
       LEFT JOIN cte_classification cte_class
            ON (j.generatedjobid = cte_class.generatedjobid)
       LEFT JOIN cte_requirement cte_req      
            ON (j.generatedjobid = cte_req.generatedjobid)             
       LEFT JOIN cte_parameter cte_param      
            ON (j.generatedjobid = cte_param.generatedjobid)
       LEFT JOIN [application] a
              ON ( j.generatedjobid = a.generatedjobid 
              AND  [dateacquired] BETWEEN CONVERT(DATETIME, '2017-01-01') AND
                              CONVERT(DATETIME, '2018-12-31 23:59:59')  )
       LEFT JOIN [address] addr
              ON ( a.applicationid = addr.applicationid 
              AND [dateacquired] BETWEEN CONVERT(DATETIME, '2017-01-01') AND
                              CONVERT(DATETIME, '2018-12-31 23:59:59') )
```



## other examples 

### example1 
```
select 
    'RUNNAME',
    'BEGIN',
    sysdate,
    wait_class || ' - ' || event as class, 
    measure, 
    value
from 
(
select * from v$session_event 
unpivot (value for measure in (TOTAL_WAITS as 'TOTAL_WAITS', 
                                TOTAL_TIMEOUTS as 'TOTAL_TIMEOUTS',
                                TIME_WAITED as 'TIME_WAITED',
                                AVERAGE_WAIT as 'AVERAGE_WAIT',
                                MAX_WAIT as 'MAX_WAIT',
                                TIME_WAITED_MICRO as 'TIME_WAITED_MICRO', 
                                EVENT_ID as 'EVENT_ID',
                                WAIT_CLASS_ID as 'WAIT_CLASS_ID',
                                WAIT_CLASS# as 'WAIT_CLASS#'
                                ))
where sid in (select /*+ no_merge */ sid from v$mystat where rownum = 1)
)

       
RUNNAME,BEGIN,20160420 21:58:36,User I/O - cell multiblock physical read                    ,TOTAL_WAITS      ,        50
RUNNAME,BEGIN,20160420 21:58:36,User I/O - cell multiblock physical read                    ,TOTAL_TIMEOUTS   ,         0
RUNNAME,BEGIN,20160420 21:58:36,User I/O - cell multiblock physical read                    ,TIME_WAITED      ,        57
RUNNAME,BEGIN,20160420 21:58:36,User I/O - cell multiblock physical read                    ,AVERAGE_WAIT     ,      1.15
RUNNAME,BEGIN,20160420 21:58:36,User I/O - cell multiblock physical read                    ,MAX_WAIT         ,         5
RUNNAME,BEGIN,20160420 21:58:36,User I/O - cell multiblock physical read                    ,TIME_WAITED_MICRO,    574273
RUNNAME,BEGIN,20160420 21:58:36,User I/O - cell multiblock physical read                    ,EVENT_ID         , 443865681
RUNNAME,BEGIN,20160420 21:58:36,User I/O - cell multiblock physical read                    ,WAIT_CLASS_ID    ,1740759767
RUNNAME,BEGIN,20160420 21:58:36,User I/O - cell multiblock physical read                    ,WAIT_CLASS#      ,         8


       SID,       SID,EVENT                            ,TOTAL_WAITS,TOTAL_TIMEOUTS,TIME_WAITED,AVERAGE_WAIT,  MAX_WAIT,TIME_WAITED_MICRO,  EVENT_ID,WAIT_CLASS_ID,WAIT_CLASS#,WAIT_CLASS
       153,       153,Disk file operations I/O         ,          4,             0,          0,           0,         0,               76, 166678035,   1740759767,          8,User I/O
       153,       153,Disk file Mirror Read            ,          4,             0,          0,         .04,         0,             1408,  13102552,   1740759767,          8,User I/O
       153,       153,control file sequential read     ,         14,             0,          2,         .12,         1,            16944,3213517201,   4108307767,          9,System I/O
       153,       153,gc cr multi block request        ,        115,             0,          2,         .02,         0,            18459, 661121159,   3871361733,         11,Cluster
       153,       153,gc cr block 2-way                ,         26,             0,          0,         .01,         0,             2589, 737661873,   3871361733,         11,Cluster
       153,       153,gc current block 2-way           ,         27,             0,          0,         .01,         0,             1992, 111015833,   3871361733,         11,Cluster
       153,       153,gc cr grant 2-way                ,          1,             0,          0,         .01,         0,               92,3201690383,   3871361733,         11,Cluster
       153,       153,gc current grant 2-way           ,          5,             0,          0,         .01,         0,              387,2685450749,   3871361733,         11,Cluster
       153,       153,gc current grant busy            ,          2,             0,          0,         .01,         0,              270,2277737081,   3871361733,         11,Cluster
       153,       153,row cache lock                   ,         12,             0,          0,         .01,         0,             1452,1714089451,   3875070507,          4,Concurrency
       153,       153,library cache pin                ,         16,             0,          0,         .01,         0,             1428,2802704141,   3875070507,          4,Concurrency
       153,       153,library cache lock               ,         15,             0,          0,         .01,         0,             2040, 916468430,   3875070507,          4,Concurrency
       153,       153,SQL*Net message to client        ,        125,             0,          0,           0,         0,              120,2067390145,   2000153315,          7,Network
       153,       153,SQL*Net message from client      ,        124,             0,     778694,     6279.79,    153480,       7786936539,1421975091,   2723168908,          6,Idle
       153,       153,SQL*Net break/reset to client    ,         14,             0,          0,           0,         0,              434,1963888671,   4217450380,          1,Application
       153,       153,cell single block physical read  ,          9,             0,          5,          .5,         2,            45231,2614864156,   1740759767,          8,User I/O
       153,       153,cell multiblock physical read    ,         50,             0,         57,        1.15,         5,           574273, 443865681,   1740759767,          8,User I/O

17 rows selected.
```


### example2 
```

    -- get min max snap_id for each dbid for the past 13 months             
    for rec_snap in (select new_dbid, target_name 
                 from dbsnmp.caw_dbid_mapping 
                 where new_dbid in ('2024176565','1890029227','1922913859','1826652812'))
    loop
        insert into plan_table (options, object_node, object_owner, object_name)
               SELECT max(rec_snap.target_name), 
                      max(dbid) awrwh_dbid,  
                      TO_CHAR(MIN(snap_id)) awrwh_min_snap_id, 
                      TO_CHAR(MAX(snap_id)) awrwh_max_snap_id
               FROM dba_hist_snapshot 
               WHERE dbid = rec_snap.new_dbid
               and to_date(to_char(END_INTERVAL_TIME,'MM/DD/YY HH24:MI:SS'),'MM/DD/YY HH24:MI:SS') &amp;gt;=  trunc(add_months(sysdate,-13),'MM');
    end loop;
    
    -- insert record for each dbid using min max snap_id 
    for rec_dbid in (select options target, object_node dbid, object_owner min_snap, object_name max_snap 
                     from plan_table)
    loop 
            insert /*+ PARALLEL(8) */ into daily_cpu_all select /*+ PARALLEL(8) */ * from (
            WITH
            cpuwl AS (
            SELECT /*+ MATERIALIZE NO_MERGE */
                instance_number,
                dbid,
                snap_id,
                SUM(CASE WHEN stat_name = 'RSRC_MGR_CPU_WAIT_TIME' THEN value ELSE 0 END) rsrcmgr,
                SUM(CASE WHEN stat_name = 'LOAD' THEN value ELSE 0 END) loadavg,
                SUM(CASE WHEN stat_name = 'NUM_CPUS' THEN value ELSE 0 END) cpu
            FROM dba_hist_osstat
            WHERE stat_name IN
            ('RSRC_MGR_CPU_WAIT_TIME','LOAD','NUM_CPUS')
            and dbid = rec_dbid.dbid
            and snap_id &amp;gt; rec_dbid.min_snap
            GROUP BY
                instance_number,
                dbid,
                snap_id
            )
            select dbid, instance_number, logdate, logmonth, loghour, max(cpu) cpu, avg(loadavg) loadavg, avg(rsrcmgrpct) rsrcmgrpct  from (
            select a.dbid, a.instance_number, TO_CHAR(a.begin_interval_time,'MM/DD/YY HH24:MI:SS') tm,
                to_char(a.begin_interval_time, 'yyyy-mm-dd') as logdate,
                to_char(a.begin_interval_time, 'mm') as logmonth,
                to_char(a.begin_interval_time, 'hh24') as loghour,
                lag(b.snap_id) over(partition by b.instance_number,b.dbid order by b.snap_id) as snap_id, 
                b.cpu AS cpu,
                round(b.loadavg,2) AS loadavg,
                round((( b.rsrcmgr-lag(b.rsrcmgr) over (partition by b.instance_number,b.dbid order by b.snap_id) ) / 100) / (((CAST(a.end_interval_time AS DATE) - CAST(a.begin_interval_time AS DATE)) * 86400)*b.cpu)*100,2) as rsrcmgrpct
            from dba_hist_snapshot a, cpuwl b
            where a.dbid = b.dbid 
            and a.instance_number = b.instance_number 
            and a.snap_id = b.snap_id)
            group by dbid, instance_number, logdate, logmonth, loghour
        )
        unpivot (value for metric_name in (cpu as 'NUM_CPUS', loadavg as 'LOAD', rsrcmgrpct as 'RSRC_MGR_CPU_WAIT_TIME_PCT'))
        union all
        select /*+ PARALLEL(8) */ dbid, instance_number, logdate, logmonth, loghour, metric_name, avg(value) as avg_hourly from (
        select a.dbid, a.instance_number, TO_CHAR(a.begin_interval_time,'MM/DD/YY HH24:MI:SS') tm,
            to_char(a.begin_interval_time, 'yyyy-mm-dd') as logdate,
            to_char(a.begin_interval_time, 'mm') as logmonth,
            to_char(a.begin_interval_time, 'hh24') as loghour,
            lag(b.snap_id) over(partition by b.metric_name,b.instance_number,b.dbid order by b.snap_id) as snap_id, 
            b.metric_name,
            case when b.metric_name = 'Host CPU Utilization (%)' then 
                case when b.average &amp;lt; 50 then (b.average*1.7)
                else (85+(b.average-50)*0.3)
                end
            when b.metric_name = 'Average Active Sessions' then b.average    
            when b.metric_name = 'Current OS Load' then b.average
            end as value
          from dba_hist_snapshot a, DBA_HIST_SYSMETRIC_SUMMARY b
          where a.dbid = rec_dbid.dbid
          and a.snap_id &amp;gt; rec_dbid.min_snap
          and a.dbid = b.dbid 
          and a.instance_number = b.instance_number 
          and a.snap_id = b.snap_id
          and b.metric_name in ('Host CPU Utilization (%)','Average Active Sessions','Current OS Load')
          ) group by dbid, instance_number, logdate, logmonth, loghour, metric_name 
          order by 3,4,5,6 asc; 

```


&lt;/pre&gt;</description>
<category>..my rewrite examples</category>
<link>http://karlarao.tiddlyspot.com#%5B%5Bnormalized%20to%20unpivot%2C%20multiple%20left%20join%20rewrite%5D%5D</link>
<pubDate>Tue, 06 Apr 2021 04:17:00 GMT</pubDate>

</item>
<item>
<title>data governance</title>
<description></description>
<category>Data Engineering</category>
<link>http://karlarao.tiddlyspot.com#%5B%5Bdata%20governance%5D%5D</link>
<pubDate>Sun, 28 Mar 2021 17:54:00 GMT</pubDate>

</item>
<item>
<title>data lineage and GDPR</title>
<description>&lt;pre&gt;

Amundsen
https://eng.lyft.com/amundsen-lyfts-data-discovery-metadata-engine-62d27254fbb9
https://www.dataengineeringpodcast.com/amundsen-data-discovery-episode-92/
Amundsen: A Data Discovery Platform From Lyft | Lyft https://www.youtube.com/watch?v=EOCYw0yf63k
https://www.amundsen.io/amundsen/


Data Fusion 
https://cloud.google.com/data-fusion/docs/tutorials/lineage



C360 
https://en.wikipedia.org/wiki/Janrain
https://marketingplatform.google.com/about/tag-manager/
https://www.ordergroove.com/home-vb/
https://www.bigcommerce.com/
https://www.lytics.com/
https://segment.com/



DBT 
https://rittmananalytics.com/blog/2020/5/28/introducing-the-ra-warehouse-dbt-framework-how-rittman-analytics-does-data-centralization
https://rittmananalytics.com/blog/tag/dbt
https://blog.getdbt.com/what--exactly--is-dbt-/
https://docs.getdbt.com/docs/building-a-dbt-project/documentation



collibra 
https://marketplace.collibra.com/listings/jdbc-driver-for-oracle/
https://www.collibra.com/



apache atlas 
https://medium.com/google-cloud/a-metadata-comparison-between-apache-atlas-and-google-data-catalog-7e1ad391b4c2
Apache Atlas Introduction: Need for Governance and Metadata management: Vimal Sharma https://www.youtube.com/watch?v=6vNJOHDE15g
https://community.cloudera.com/t5/Community-Articles/Customizing-Atlas-Part1-Model-governance-traceability-and/ta-p/249250

Data Discovery and Lineage: Integrating streaming data in the public cloud with on-prem, classic datastores and heterogeneous schema types
https://conferences.oreilly.com/strata/strata-ny-2018/cdn.oreillystatic.com/en/assets/1/event/278/Data%20discovery%20and%20lineage_%20Integrating%20streaming%20data%20in%20the%20public%20cloud%20with%20on-prem,%20classic%20data%20stores,%20and%20heterogeneous%20schema%20types%20Presentation.pdf
Barbara Eckman, Ph.D.Principal ArchitectComcast
https://conferences.oreilly.com/strata/strata-ny-2018/public/schedule/detail/69518.html
https://learning.oreilly.com/videos/strata-data-conference/9781491976326/9781491976326-video316438?autoplay=false 
https://www.youtube.com/results?search_query=heterogeneous+big+data+environment+with+Apache+Atlas+and+Avro+-+Barbara+Eckman



navigator (precursor to atlas)
https://community.cloudera.com/t5/Support-Questions/Cloudera-Navigator-vs-Apache-Atlas/td-p/297931



gcp data lineage 
https://stackoverflow.com/questions/55000865/how-can-i-perform-data-lineage-in-gcp
https://github.com/GoogleCloudPlatform/datacatalog-connectors-hive/tree/master/google-datacatalog-apache-atlas-connector



spark spline 
https://medium.com/@reenugrewal/data-lineage-tracking-using-spline-on-atlas-via-event-hub-6816be0fd5c7



apache airflow marquez
https://www.dremio.com/subsurface/data-lineage-with-apache-airflow
https://www.slideshare.net/WillyLulciuc/data-lineage-with-apache-airflow-using-marquez
Data Lineage with Apache Airflow | Datakin https://www.youtube.com/watch?v=dfRetdg9444 


airflow with atlas 
https://www.datastackpros.com/2020/04/gcp-cloud-data-lineage-with-airflow.html
https://stackoverflow.com/questions/53539491/how-import-the-lineage-of-airflow-to-the-atlas
https://github.com/apache/airflow/blob/master/docs/apache-airflow/lineage.rst




talend to atlas  
https://help.talend.com/r/TakcAFoOnWMPdNo8XXlPpg/_FqzpSa92Vga9NfumjCM~Q
https://help.talend.com/r/XSofSS9S7oLFhM0dJizFlg/hPYn15mq7Is2544uaVhvxQ



streaming avro schema registry 
https://community.cloudera.com/t5/Community-Articles/Avro-Schema-Registry-with-Apache-Atlas-for-Streaming-Data/ta-p/247037
End to end Data Governance with Apache Avro and Atlas https://www.youtube.com/watch?v=b--xwHHukRA
https://community.cloudera.com/t5/Community-Articles/Apache-Atlas-as-an-Avro-Schema-Registry-Test-Drive/ta-p/247039
https://community.cloudera.com/t5/Community-Articles/Avro-Schema-Registry-with-Apache-Atlas-for-Streaming-Data/ta-p/247037



finos waltz https://www.finos.org/blog/introduction-to-finos-waltz
https://waltz.finos.org/
https://waltz.finos.org/blog/index.html
http://www.waltztechnology.com/measurable-category/4



data lineage GDPR 
https://info.talend.com/rs/talend/images/WP_EN_TLD_Talend_Outlining_PracticalSteps_GDPR_Compliance.pdf
https://www.octopai.com/gdpr-experts/?creative=499030836191&amp;amp;keyword=data%20governance%20data%20lineage&amp;amp;matchtype=b&amp;amp;network=g&amp;amp;device=c&amp;amp;gclid=CjwKCAjwr_uCBhAFEiwAX8YJgf2QLkmBIZu7JRszD2JtmwbbGgwZ6QSGlsB5niAFmAmN_GDmTXWv3hoCS8cQAvD_BwE
https://www.talend.com/resources/gdpr-stitch-data-lineage/
https://www.talend.com/resources/16-step-data-governance-plan-gdpr-compliance/?ty=content
https://www.talend.com/resources/gdpr-govern-analytical-models/
https://www.talend.com/solutions/data-protection-gdpr-compliance/
https://www.slideshare.net/Hadoop_Summit/practical-experiences-using-atlas-and-ranger-to-implement-gdpr
https://theworldofapenguin.blogspot.com/
https://github.com/SvenskaSpel/cobra-policytool
https://github.com/SvenskaSpel/cobra-policytool
















&lt;/pre&gt;</description>
<category>data governance</category>
<link>http://karlarao.tiddlyspot.com#%5B%5Bdata%20lineage%20and%20GDPR%5D%5D</link>
<pubDate>Sun, 28 Mar 2021 17:54:00 GMT</pubDate>

</item>
</channel>
</rss>